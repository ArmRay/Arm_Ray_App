---
swagger: "2.0"
info:
  description: "Definition of ArmRay backend API"
  version: "0.0.1"
  title: "ArmRay API"
basePath: "/armray/api/0.1/rest"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /Grant:
    post:
      tags:
      - "Grant"
      description: "Creates `Grant` objects. **post_title**, **project_descpost_textription**,\n\
        **post_creator_id**, and **is_post_private** are required,\nall others optional.\n"
      operationId: "createGrant"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "grant_url"
        in: "formData"
        description: "array of URLs for `Grant`"
        required: false
        type: "string"
      - name: "grant_description"
        in: "formData"
        description: "Description of grant"
        required: false
        type: "string"
      - name: "amount"
        in: "formData"
        description: "Amount of grant"
        required: false
        type: "number"
      responses:
        200:
          description: "the id of the created `Grant`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grant/{id}:
    get:
      tags:
      - "Grant"
      description: "Retrieves `Grant` objects by **id**.\n"
      operationId: "getGrantById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant`"
          schema:
            $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    put:
      tags:
      - "Grant"
      description: "Updates `Grant` objects. **id** is required,\nall others optional.\n"
      operationId: "updateGrantById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "grant_url"
        in: "formData"
        description: "array of URLs for `Grant`"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "grant_description"
        in: "formData"
        description: "Description of `Grant`"
        required: false
        type: "string"
      - name: "amount"
        in: "formData"
        description: "Amount of `Grant`"
        required: false
        type: "number"
        format: "float"
      responses:
        200:
          description: "A `Grant` object"
          schema:
            $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    delete:
      tags:
      - "Grant"
      description: "Deletes `Grant` objects by **id**.\n"
      operationId: "deleteGrantById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grant/{id}/amount:
    get:
      tags:
      - "Grant"
      description: "Retrieves `Grant` amount\n"
      operationId: "getGrantAmount"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` amount"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    post:
      tags:
      - "Grant"
      description: "Set `Grant` amount\n"
      operationId: "setGrantAmount"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "amount"
        in: "formData"
        description: "the `Grant` amount"
        required: true
        type: "number"
        format: "float"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    put:
      tags:
      - "Grant"
      description: "Modify `Grant` amount\n"
      operationId: "modifyGrantAmount"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "amount"
        in: "formData"
        description: "the `Grant` amount"
        required: true
        type: "number"
        format: "float"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    delete:
      tags:
      - "Grant"
      description: "Clear `Grant` amount\n"
      operationId: "clearGrantAmount"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grant/{id}/amount/{amount}:
    get:
      tags:
      - "Grant"
      description: "Retrieves if `Grant` amount is equal to param\n"
      operationId: "isGrantAmount"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "amount"
        in: "path"
        description: "The `Grant` amount"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` amount"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    post:
      tags:
      - "Grant"
      description: "Set `Grant` amount\n"
      operationId: "setGrantAmountPath"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "amount"
        in: "path"
        description: "the `Grant` amount"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    put:
      tags:
      - "Grant"
      description: "Modify `Grant` amount\n"
      operationId: "modifyGrantAmountPath"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "amount"
        in: "path"
        description: "the `Grant` amount"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grant/{id}/created:
    get:
      tags:
      - "Grant"
      description: "Retrieves `Grant` object created date\n"
      operationId: "getGrantCreatedDate"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` creation date"
          schema:
            type: "string"
            format: "date-time"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grant/{id}/description:
    get:
      tags:
      - "Grant"
      description: "Retrieves `Grant` description\n"
      operationId: "getGrantDescription"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    post:
      tags:
      - "Grant"
      description: "Set `Grant` description\n"
      operationId: "setGrantDescription"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "description"
        in: "formData"
        description: "the `Grant` description"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` url array"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    put:
      tags:
      - "Grant"
      description: "Modify `Grant` description\n"
      operationId: "modifyGrantDescription"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "description"
        in: "formData"
        description: "the `Grant` description"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` url array"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    delete:
      tags:
      - "Grant"
      description: "Clear `Grant` description\n"
      operationId: "clearGrantDescription"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grant/{id}/keys:
    get:
      tags:
      - "Grant"
      description: "Retrieves `Grant` keywords\n"
      operationId: "getGrantKeywords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` keywords"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` keywords"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    post:
      tags:
      - "Grant"
      description: "Set `Grant` keywords\n"
      operationId: "setGrantKeywords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "keywords"
        in: "formData"
        description: "the `Grant` keywords"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    put:
      tags:
      - "Grant"
      description: "Modify `Grant` keywords\n"
      operationId: "addGrantKeywords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "keywords"
        in: "formData"
        description: "the `Grant` keywords"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    delete:
      tags:
      - "Grant"
      description: "Clear `Grant` keywords\n"
      operationId: "clearGrantKeywords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grant/{id}/keys/{keyword}:
    get:
      tags:
      - "Grant"
      description: "Retrieves if `Grant` amount is equal to param\n"
      operationId: "isGrantHaveKeyword"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "The `Grant` keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    post:
      tags:
      - "Grant"
      description: "Set `Grant` keyword\n"
      operationId: "setGrantKeywordPath"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "the `Grant` keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    put:
      tags:
      - "Grant"
      description: "Add `Grant` keyword\n"
      operationId: "addGrantKeyword"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "the `Grant` keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    delete:
      tags:
      - "Grant"
      description: "Set `Grant` keyword\n"
      operationId: "deleteGrantKeyword"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "the `Grant` keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grant/{id}/modified:
    get:
      tags:
      - "Grant"
      description: "Retrieves `Grant` objects modified date\n"
      operationId: "getGrantModifiedDate"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` modified date"
          schema:
            type: "string"
            format: "date-time"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grant/{id}/url:
    get:
      tags:
      - "Grant"
      description: "Retrieves `Grant` url\n"
      operationId: "getGrantUrl"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` url array"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    post:
      tags:
      - "Grant"
      description: "Replace `Grant` url array\n"
      operationId: "setGrantUrls"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "urls"
        in: "formData"
        description: "The `Grant` urls"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    put:
      tags:
      - "Grant"
      description: "Add `Grant` url\n"
      operationId: "addGrantUrl"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      - name: "url"
        in: "formData"
        description: "The `Grant` url"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
    delete:
      tags:
      - "Grant"
      description: "Clear `Grant` url array\n"
      operationId: "clearGrantUrls"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Grant` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Grant` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grants:
    get:
      tags:
      - "Grant"
      description: "Gets `Grant` objects.\nRequired query param of **size** determines\n\
        max number of results per page, and **page** determines\nwhich page in the\
        \ pagination we are. Remaining params optional.\n"
      operationId: "getGrants"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "size"
        in: "formData"
        description: "Max size of array to return"
        required: true
        type: "number"
        format: "int32"
      - name: "page"
        in: "formData"
        description: "Location in pagination"
        required: true
        type: "number"
        format: "int32"
      - name: "grant_id"
        in: "formData"
        description: "Unique identifier representing a specific `Grant`"
        required: false
        type: "string"
      - name: "created_date"
        in: "formData"
        description: "datetime stamp of `Grant` creation"
        required: false
        type: "string"
        format: "date-time"
      - name: "updated_date"
        in: "formData"
        description: "datetime stamp of `Grant` update"
        required: false
        type: "string"
        format: "date-time"
      - name: "grant_url"
        in: "formData"
        description: "array of URLs in `Grant`"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "grant_description"
        in: "formData"
        description: "array of keywords for `Grant`"
        required: false
        type: "string"
      - name: "grant_amount"
        in: "formData"
        description: "Amount of `Grant`"
        required: false
        type: "string"
      responses:
        200:
          description: "An array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grants/amount:
    get:
      tags:
      - "Grant"
      description: "Retrieve `Grant` objects based on amount\n"
      operationId: "getGrantsByAmount"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "minimum"
        in: "formData"
        description: "minimum grant amount"
        required: true
        type: "number"
        format: "float"
      - name: "maximum"
        in: "formData"
        description: "maximum grant amount"
        required: true
        type: "number"
        format: "float"
      responses:
        200:
          description: "Array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grants/amount/max/{amount}:
    get:
      tags:
      - "Grant"
      description: "Retrieve `Grant` objects based on amount\n"
      operationId: "getGrantsByMaxAmount"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "amount"
        in: "path"
        description: "maxiumum grant amount"
        required: true
        type: "number"
        format: "float"
      responses:
        200:
          description: "Array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grants/amount/min/{amount}:
    get:
      tags:
      - "Grant"
      description: "Retrieve `Grant` objects based on amount\n"
      operationId: "getGrantsByMinAmount"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "amount"
        in: "path"
        description: "minimum grant amount"
        required: true
        type: "number"
        format: "float"
      responses:
        200:
          description: "Array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grants/created_date:
    get:
      tags:
      - "Grant"
      description: "Retrieve `Grant` objects created on or later than given date\n"
      operationId: "getGrantsByCreatedDateForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "created_date"
        in: "formData"
        description: "date of creation"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "Array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grants/created_date/{created_date}:
    get:
      tags:
      - "Grant"
      description: "Retrieve `Grant` objects created on or later than given date\n"
      operationId: "getGrantsByCreatedDate"
      produces:
      - "application/json"
      parameters:
      - name: "created_date"
        in: "path"
        description: "date of creation"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grants/keys:
    get:
      tags:
      - "Grant"
      description: "Retrieve `Grant` objects by a set of keywords\n"
      operationId: "getGrantsByKeywords"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "keywords"
        in: "formData"
        description: "Keywords when searching for user"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "An array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grants/keys/{keyword}:
    get:
      tags:
      - "Grant"
      description: "Retrieve `Project` objects by a particular keyword\n"
      operationId: "getGrantsByKeyword"
      produces:
      - "application/json"
      parameters:
      - name: "keyword"
        in: "path"
        description: "keyword to search for"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grants/modified_date:
    get:
      tags:
      - "Grant"
      description: "Retrieve `Grant` objects modified on or later than given date\n"
      operationId: "getGrantsByModifiedDateForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "modified_date"
        in: "formData"
        description: "date of modification"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "Array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Grants/modified_date/{modified_date}:
    get:
      tags:
      - "Grant"
      description: "Retrieve `Grant` objects created on or later than given date\n"
      operationId: "getGrantsByModifiedDate"
      produces:
      - "application/json"
      parameters:
      - name: "modified_date"
        in: "path"
        description: "date of creation"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Grant"
  /Post:
    post:
      tags:
      - "Post"
      description: "Creates `Post` objects. **post_title**, **project_descpost_textription**,\n\
        **post_creator_id**, and **is_post_private** are required,\nall others optional.\n"
      operationId: "createPost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "post_title"
        in: "formData"
        description: "ID of `User` author of post"
        required: false
        type: "string"
      - name: "post_text"
        in: "formData"
        description: "ID of `User` author of post"
        required: false
        type: "string"
      - name: "post_creator_id"
        in: "formData"
        description: "ID of `User` author of post"
        required: false
        type: "string"
      - name: "post_tags_id"
        in: "formData"
        description: "array of `User`s tagged in `Post`"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "post_keywords"
        in: "formData"
        description: "array of keywords for `Post`"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "is_post_private"
        in: "formData"
        description: "is `Post` private?"
        required: false
        type: "boolean"
      responses:
        200:
          description: "the id of the created `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Post/{id}:
    get:
      tags:
      - "Post"
      description: "Retrieves `Post` objects by **id**.\n"
      operationId: "getPostById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Post`"
          schema:
            $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    put:
      tags:
      - "Post"
      description: "Updates `Post` objects. **id** is required,\nall others optional.\n"
      operationId: "updatePosttById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "post_title"
        in: "formData"
        description: "The `Post` name"
        required: false
        type: "string"
      - name: "post_text"
        in: "formData"
        description: "The `Post` body"
        required: false
        type: "string"
      - name: "post_creator_id"
        in: "formData"
        description: "ID of `User` author of post"
        required: false
        type: "string"
      - name: "post_tags_id"
        in: "formData"
        description: "array of `User`s tagged in `Post`"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "post_keywords"
        in: "formData"
        description: "array of keywords for `Post`"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "is_post_private"
        in: "formData"
        description: "Is post private?"
        required: false
        type: "boolean"
      responses:
        200:
          description: "A `Post` object"
          schema:
            $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    delete:
      tags:
      - "Post"
      description: "Deletes `Post` objects by **id**.\n"
      operationId: "deletePostById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Post` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Post/{id}/author:
    get:
      tags:
      - "Post"
      - "User"
      description: "Retrieves `Post` author\n"
      operationId: "getPostAuthorById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The author"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    post:
      tags:
      - "Post"
      description: "Sets the post author.  **id** and **author** both required.\n"
      operationId: "updatePostAuthorByIdPost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      - name: "text"
        in: "formData"
        description: "new author"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    put:
      tags:
      - "Post"
      description: "Sets the post author.  **id** and **author** both required.\n"
      operationId: "updatePostAuthorById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      - name: "author"
        in: "formData"
        description: "new author"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    delete:
      tags:
      - "Post"
      description: "Deletes text of a `Post` author by **id**.\n"
      operationId: "deletePostAuthorById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Post` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Post/{id}/keys:
    get:
      tags:
      - "Post"
      description: "Retrieves `Post` keywords\n"
      operationId: "getPostKeywordsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The keywords"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    post:
      tags:
      - "Post"
      description: "Replaces keywords on `Post` objects. **id** and **keywords* both\
        \ required.\n"
      operationId: "replacePostKeywordsById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "keywords"
        in: "formData"
        description: "new tags"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    put:
      tags:
      - "Post"
      description: "Adds keywords to `Post` objects. **id** and **keywords** both\
        \ required.\n"
      operationId: "updateProjectKeywordsById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "keywords"
        in: "formData"
        description: "new keywords"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    delete:
      tags:
      - "Post"
      description: "Deletes all tags on a `Post` objects by **id**.\n"
      operationId: "deletePostKeywordsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Post` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Post/{id}/keys/{keyword}:
    get:
      tags:
      - "Post"
      description: "Retrieves whether keyword is on past\n"
      operationId: "isKeywordOnPost"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "the keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "Boolean of whether the user is taged"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    post:
      tags:
      - "Post"
      description: "Adds keyword to `Post` objects. **id** and **user_id* both required.\n"
      operationId: "addPostKeywordByIdPost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "The `User` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    put:
      tags:
      - "Post"
      description: "Adds tags to `Post` objects. **id** and **keyword** both required.\n"
      operationId: "addPostKeywordById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post's name"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "the keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    delete:
      tags:
      - "Post"
      description: "Deletes a keyword on a `Post` objects by **id** and **keyword**\n"
      operationId: "deletePostKeywordById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "The keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Post` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Post/{id}/private:
    get:
      tags:
      - "Post"
      description: "Retrieves whether `Post` is private\n"
      operationId: "isPostPrivateById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    post:
      tags:
      - "Post"
      description: "Sets the post privacy.  **id** and **is_private** both required.\n"
      operationId: "updatePostPrivacyByIdPost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      - name: "is_private"
        in: "formData"
        description: "is post private?"
        required: true
        type: "boolean"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    put:
      tags:
      - "Post"
      description: "Sets the post privacy.  **id** and **is_private** both required.\n"
      operationId: "updatePostPrivacyById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      - name: "is_private"
        in: "formData"
        description: "is post private?"
        required: true
        type: "boolean"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Post/{id}/tags:
    get:
      tags:
      - "Post"
      description: "Retrieves `Post` tags\n"
      operationId: "getPostTagsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The ids of the tagged `User` ids"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    post:
      tags:
      - "Post"
      description: "Replaces tags on `Post` objects. **id** and **tagged_users* both\
        \ required.\n"
      operationId: "replacePostTagsById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "tagged_users"
        in: "formData"
        description: "new tags"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    delete:
      tags:
      - "Post"
      description: "Deletes all tags on a `Post` objects by **id**.\n"
      operationId: "deleteProjectTagsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Post` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Post/{id}/tags/{user_id}:
    get:
      tags:
      - "Post"
      - "User"
      description: "Retrieves whether user is tagged on past\n"
      operationId: "getIsUserTagOnProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "user_id to check for"
        required: true
        type: "string"
      responses:
        200:
          description: "Boolean of whether the user is taged"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    post:
      tags:
      - "Post"
      - "User"
      description: "Adds tag to `Post` objects. **id** and **user_id** both required.\n"
      operationId: "addPostTagsByIdPost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The `User` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    put:
      tags:
      - "Post"
      - "User"
      description: "Adds tags to `Post` objects. **id** and **user_id** both required.\n"
      operationId: "updatePostTagsById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "new tags"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    delete:
      tags:
      - "Post"
      - "User"
      description: "Deletes the tags on a `Post` objects by **id** and **user_id**\n"
      operationId: "deletePostTagsById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The `User` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Post` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Post/{id}/text:
    get:
      tags:
      - "Post"
      description: "Retrieves `Post` text\n"
      operationId: "getPostTextById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The text"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    post:
      tags:
      - "Post"
      description: "Sets the post text.  **id** and **text** both required.\n"
      operationId: "updatePostTextByIdPost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      - name: "text"
        in: "formData"
        description: "new title"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    put:
      tags:
      - "Post"
      description: "Sets the post title.  **id** and **text** both required.\n"
      operationId: "updatePostTextById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "text"
        in: "formData"
        description: "new text"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    delete:
      tags:
      - "Post"
      description: "Deletes text of a `Post` objects by **id**.\n"
      operationId: "deletePostTextById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Post` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Post/{id}/title:
    get:
      tags:
      - "Post"
      description: "Retrieves `Post` title\n"
      operationId: "getPostTitleById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The title"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    post:
      tags:
      - "Post"
      description: "Sets the post title.  **id** and **title** both required.\n"
      operationId: "updatePostTitleByIdPost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "title"
        in: "formData"
        description: "new title"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    put:
      tags:
      - "Post"
      description: "Sets the post title.  **id** and **title** both required.\n"
      operationId: "updatePostTitleById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "title"
        in: "formData"
        description: "new title"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the `Post`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
    delete:
      tags:
      - "Post"
      description: "Deletes title of a `Post` objects by **id**.\n"
      operationId: "deletePosTitleById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Post` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Posts:
    get:
      tags:
      - "Post"
      description: "Gets `Post` objects.\nRequired query param of **size** determines\n\
        max number of results per page, and **page** determines\nwhich page in the\
        \ pagination we are. Remaining params optional.\n"
      operationId: "getPosts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "size"
        in: "formData"
        description: "Max size of array to return"
        required: true
        type: "number"
        format: "int32"
      - name: "page"
        in: "formData"
        description: "Location in pagination"
        required: true
        type: "number"
        format: "int32"
      - name: "post_id"
        in: "formData"
        description: "Unique identifier representing a specific `Post`"
        required: false
        type: "string"
      - name: "created_date"
        in: "formData"
        description: "datetime stamp of `Post` creation"
        required: false
        type: "string"
        format: "date-time"
      - name: "updated_date"
        in: "formData"
        description: "datetime stamp of `Post` update"
        required: false
        type: "string"
        format: "date-time"
      - name: "post_tags_id"
        in: "formData"
        description: "array of `User`s tagged in `Post`"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "post_keywords"
        in: "formData"
        description: "array of keywords for `Post`"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "post_title"
        in: "formData"
        description: "ID of `User` author of post"
        required: false
        type: "string"
      - name: "post_text"
        in: "formData"
        description: "ID of `User` author of post"
        required: false
        type: "string"
      - name: "post_creator_id"
        in: "formData"
        description: "ID of `User` author of post"
        required: false
        type: "string"
      - name: "is_post_private"
        in: "formData"
        description: "is `Post` private?"
        required: false
        type: "boolean"
      responses:
        200:
          description: "An array of posts"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Posts/author/{user_id}:
    get:
      tags:
      - "Post"
      - "User"
      description: "Retrieve `Post` objects with a particular `User` as author\n"
      operationId: "getPostsByAuthorId"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ID of 'User' to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of posts"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Posts/created_date:
    get:
      tags:
      - "Post"
      description: "Retrieve `Post` objects created on or later than given date\n"
      operationId: "getPostsByCreatedDateForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "created_date"
        in: "formData"
        description: "date of creation"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "posts response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Posts/created_date/{created_date}:
    get:
      tags:
      - "Post"
      description: "Retrieve `Post` objects created on or later than given date\n"
      operationId: "getPostsByCreatedDate"
      produces:
      - "application/json"
      parameters:
      - name: "created_date"
        in: "path"
        description: "date of creation"
        required: true
        type: "string"
      responses:
        200:
          description: "posts response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Posts/keys:
    get:
      tags:
      - "Post"
      description: "Retrieve `Project` objects by a set of keywords\n"
      operationId: "getPostsByKeywords"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "keywords"
        in: "formData"
        description: "Keywords when searching for user"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "An array of posts"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Posts/keys/{keyword}:
    get:
      tags:
      - "Post"
      description: "Retrieve `Project` objects by a particular keyword\n"
      operationId: "getPostsByKeyword"
      produces:
      - "application/json"
      parameters:
      - name: "keyword"
        in: "path"
        description: "keyword to search for"
        required: true
        type: "string"
      responses:
        200:
          description: "posts response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Posts/modified_date:
    get:
      tags:
      - "Post"
      description: "Retrieve `Post` objects modified on or later than given date\n"
      operationId: "getPostsByModifiedDateForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "modified_date"
        in: "formData"
        description: "date of modification"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "posts response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Posts/modified_date/{modified_date}:
    get:
      tags:
      - "Post"
      description: "Retrieve `Post` objects created on or later than given date\n"
      operationId: "getPostsByModifiedDate"
      produces:
      - "application/json"
      parameters:
      - name: "modified_date"
        in: "path"
        description: "date of creation"
        required: true
        type: "string"
      responses:
        200:
          description: "posts response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Post"
  /Project:
    post:
      tags:
      - "Project"
      description: "Creates `Project` objects. **project_name**, **project_description**,\n\
        **project_creator_id**, and **is_project_private** are required,\nall others\
        \ optional.\n"
      operationId: "createProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project_name"
        in: "formData"
        description: "Project's name"
        required: true
        type: "string"
      - name: "project_main_grant_type"
        in: "formData"
        description: "Project's grant type"
        required: false
        type: "string"
      - name: "project_description"
        in: "formData"
        description: "Description of project"
        required: true
        type: "string"
      - name: "project_creator_id"
        in: "formData"
        description: "array of project creator ids"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "project_collaborators_id"
        in: "formData"
        description: "array of project collaborator ids"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "project_keywords"
        in: "formData"
        description: "array of project keywords"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "project_urls"
        in: "formData"
        description: "array of project URLs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "grant_id"
        in: "formData"
        description: "Grant ID"
        required: false
        type: "string"
      - name: "university_id"
        in: "formData"
        description: "ID of university hosting research"
        required: false
        type: "string"
      - name: "grant_facilitator"
        in: "formData"
        description: "Name of individual fascilitating grant funding"
        required: false
        type: "string"
      - name: "project_file"
        in: "formData"
        description: "files for grant"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "reviews"
        in: "formData"
        description: "reviews"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "posts"
        in: "formData"
        description: "posts related to project"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "is_project_private"
        in: "formData"
        description: "is project private?"
        required: true
        type: "boolean"
      responses:
        200:
          description: "The `id` of the created user"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}:
    get:
      tags:
      - "Project"
      description: "Retrieve a 'Project' by their id.\n"
      operationId: "getProjectById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "the `id` of the `Project` to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the deleted `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      description: "Updates a `Project` object. All fields other than `id` optional.\n"
      operationId: "updateProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
      - name: "project_name"
        in: "formData"
        description: "Project's name"
        required: false
        type: "string"
      - name: "project_main_grant_type"
        in: "formData"
        description: "Project's grant type"
        required: false
        type: "string"
      - name: "project_description"
        in: "formData"
        description: "Description of project"
        required: false
        type: "string"
      - name: "project_creator_id"
        in: "formData"
        description: "array of project creator ids"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "project_collaborators_id"
        in: "formData"
        description: "array of project collaborator ids"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "project_keywords"
        in: "formData"
        description: "array of project keywords"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "project_urls"
        in: "formData"
        description: "array of project URLs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "grant_id"
        in: "formData"
        description: "Grant ID"
        required: false
        type: "string"
      - name: "university_id"
        in: "formData"
        description: "ID of university hosting research"
        required: false
        type: "string"
      - name: "grant_facilitator"
        in: "formData"
        description: "Name of individual fascilitating grant funding"
        required: false
        type: "string"
      - name: "project_file"
        in: "formData"
        description: "files for grant"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "reviews"
        in: "formData"
        description: "reviews"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "posts"
        in: "formData"
        description: "posts related to project"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "is_project_private"
        in: "formData"
        description: "is project private?"
        required: false
        type: "boolean"
      responses:
        200:
          description: "The `id` of the updatee `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      description: "Delete a 'Project' by their id.\n"
      operationId: "deleteProjectById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "the `id` of the `Project` to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the deleted `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/collaborators:
    get:
      tags:
      - "Project"
      - "User"
      description: "Get collaborators of a `Project`.\n"
      operationId: "getAllProjectCollaborators"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `collaborators` associated with the `Project`"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      - "User"
      description: "Set creators of a `Project`.\n"
      operationId: "setAllProjectCollaborators"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "collaborators"
        in: "formData"
        description: "The `ids` of the ollaborators"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "User"
      description: "Add to collaborators of a `Project`.\n"
      operationId: "addProjectCollaborators"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "collaborators"
        in: "formData"
        description: "The `ids` of the collaborators"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "User"
      description: "Remove all 'project_collaborators' from a `Project`.\n"
      operationId: "deleteProjectCollaborators"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/collaborators/{user_id}:
    get:
      tags:
      - "Project"
      - "User"
      description: "Check if `User` is collaborator on `Project', return if true\n"
      operationId: "isUserCollaboratorOnProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
      responses:
        200:
          description: "The user"
          schema:
            $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      - "User"
      description: "Set collaborators of a `Project`.\n"
      operationId: "setProjectCollaborators"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The `id` of the collaborator"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "User"
      description: "Add to collaborator of a `Project`.\n"
      operationId: "addProjectCollaborator"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The `ids` of the collaborator"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "User"
      description: "Remove a 'project_collaborator' from a `Project`.\n"
      operationId: "deleteProjectCollaborator"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The `ids` of the collaborator"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/creators:
    get:
      tags:
      - "Project"
      - "User"
      description: "Get creators of a `Project`.\n"
      operationId: "getAllProjectCreators"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `creators` associated with the `Project`"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      - "User"
      description: "Set creators of a `Project`.\n"
      operationId: "setAllProjectCreators"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "creators"
        in: "formData"
        description: "The `ids` of the creators"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "User"
      description: "Add to creators of a `Project`.\n"
      operationId: "addProjectCreators"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "creators"
        in: "formData"
        description: "The `ids` of the creators"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "User"
      description: "Remove all 'project_creators' from a `Project`.\n"
      operationId: "deleteProjectCreators"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/creators/{user_id}:
    get:
      tags:
      - "Project"
      - "User"
      description: "Check if `User` is creator on `Project', return user if true.\n"
      operationId: "isUserCreatorOnProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The user id"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      - "User"
      description: "Set creator of a `Project`.\n"
      operationId: "setProjectCreator"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The `id` of the creator"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "User"
      description: "Add to creators of a `Project`.\n"
      operationId: "addProjectCreator"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The `ids` of the creators"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "User"
      description: "Remove a 'project_creator' from a `Project`.\n"
      operationId: "deleteProjectCreator"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The `ids` of the creators"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/description:
    get:
      tags:
      - "Project"
      description: "Retrieve project_description associated with a `Project`.\n"
      operationId: "getProjectDescriptionById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The project_description"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      description: "Delete project_description from a project\n"
      operationId: "deleteProjectDescription"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_description` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/description/{project_description}:
    get:
      tags:
      - "Project"
      description: "Check if project descript of `Project` is some value\n"
      operationId: "isProjectDescriptionOnProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "project_description"
        in: "path"
        description: "The `project_description` of the `Project`"
        required: true
        type: "string"
      responses:
        200:
          description: "The post"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      description: "Add project_description to a `Project`.\n"
      operationId: "setProjectDescription"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "project_description"
        in: "path"
        description: "The project_description"
        required: true
        type: "string"
      responses:
        200:
          description: "The id associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      description: "Modify project_description of a `Project`.\n"
      operationId: "modifyProjectDescription"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "project_description"
        in: "path"
        description: "The project_description"
        required: true
        type: "string"
      responses:
        200:
          description: "The id associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/files:
    get:
      tags:
      - "Project"
      description: "Get files of a `Project`.\n"
      operationId: "getAllProjectFiles"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `files` associated with the `Project`"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      description: "Set files of a `Project`.\n"
      operationId: "setAllProjectFiles"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "files"
        in: "formData"
        description: "The `files` of the project"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      description: "Add to files of a `Project`.\n"
      operationId: "addProjectFiles"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "urls"
        in: "formData"
        description: "The `files` of the `Project``"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      description: "Remove all 'files' from a `Project`.\n"
      operationId: "deleteProjectFiles"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/grant:
    get:
      tags:
      - "Project"
      - "Grant"
      description: "Retrieve grant associated with a `Project`.\n"
      operationId: "getProjectGrantById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The grant"
          schema:
            $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "Grant"
      description: "Delete grant from a project\n"
      operationId: "deleteProjectGrant"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `grant` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/grant/{grant_id}:
    get:
      tags:
      - "Project"
      - "Grant"
      description: "Check if `Grant` is on `Project`\n"
      operationId: "isGrantOnProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "grant_id"
        in: "path"
        description: "The `grant_id` of the `Project`"
        required: true
        type: "string"
      responses:
        200:
          description: "The post"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      - "Grant"
      description: "Add grant to a `Project`.\n"
      operationId: "setProjectGrant"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "grant_id"
        in: "path"
        description: "The grant_id"
        required: true
        type: "string"
      responses:
        200:
          description: "The id associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "Grant"
      description: "Modify grant of a `Project`.\n"
      operationId: "modifyProjectGrant"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "grant_id"
        in: "path"
        description: "The grant_id"
        required: true
        type: "string"
      responses:
        200:
          description: "The id associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/grant_type:
    get:
      tags:
      - "Project"
      - "Grant"
      - "REFACTOR-TODO-move-grant-stuff-to-grant-object"
      description: "Retrieve project_main_grant_type associated with a `Project`.\n"
      operationId: "getProjectGrantTypeById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The project_main_grant_type"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "Grant"
      - "REFACTOR-TODO-move-grant-stuff-to-grant-object"
      description: "Delete project_main_grant_type from a project\n"
      operationId: "deleteProjectGrantType"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_main_grant_type` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/grant_type/{project_main_grant_type}:
    get:
      tags:
      - "Project"
      - "Grant"
      - "REFACTOR-TODO-move-grant-stuff-to-grant-object"
      description: "Check if grant tyoe  of `Project` is some value\n"
      operationId: "isGrantTypeOnProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "project_main_grant_type"
        in: "path"
        description: "The `project_main_grant_type` of the `Project`"
        required: true
        type: "string"
      responses:
        200:
          description: "The post"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      - "Grant"
      - "REFACTOR-TODO-move-grant-stuff-to-grant-object"
      description: "Add project_name to a `Project`.\n"
      operationId: "setProjectGrantType"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "project_main_grant_type"
        in: "path"
        description: "The project_main_grant_type"
        required: true
        type: "string"
      responses:
        200:
          description: "The id associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "Grant"
      - "REFACTOR-TODO-move-grant-stuff-to-grant-object"
      description: "Modify project_name of a `Project`.\n"
      operationId: "modifyProjectGrantType"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "project_main_grant_type"
        in: "path"
        description: "The project_main_grant_type"
        required: true
        type: "string"
      responses:
        200:
          description: "The id associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/keys:
    get:
      tags:
      - "Project"
      description: "Get keywords of a `Project`.\n"
      operationId: "getAllProjectKeywords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `keywords` associated with the `Project`"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      description: "Set keywords of a `Project`.\n"
      operationId: "setAllProjectKeywords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "keywords"
        in: "formData"
        description: "The `keywords` of the `Project``"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      description: "Add to keywords of a `Project`.\n"
      operationId: "addProjectKeywords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "keywords"
        in: "formData"
        description: "The `ids` of the collaborators"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      description: "Remove all 'keywords' from a `Project`.\n"
      operationId: "deleteProjectKeywords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/keys/{keyword}:
    get:
      tags:
      - "Project"
      description: "Check if keyword is on `Project'.\n"
      operationId: "isKeywordOnProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "The keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      description: "Set keyword of a `Project`.\n"
      operationId: "setProjectKeyword"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "The `keyword`"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      description: "Add to keyword of a `Project`.\n"
      operationId: "addProjectKeyword"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "The keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      description: "Remove a 'keyword' from a `Project`.\n"
      operationId: "deleteProjectKeyword"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "The keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/name/{project_name}:
    get:
      tags:
      - "Project"
      description: "Check if project name of `Project` is some value\n"
      operationId: "isNameOnProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "project_name"
        in: "path"
        description: "The `project_name` of the `Project`"
        required: true
        type: "string"
      responses:
        200:
          description: "The post"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      description: "Add project_name to a `Project`.\n"
      operationId: "addProjectName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "project_name"
        in: "path"
        description: "The project_name"
        required: true
        type: "string"
      responses:
        200:
          description: "The id associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      description: "Modify project_name of a `Project`.\n"
      operationId: "modifyProjectName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "project_name"
        in: "path"
        description: "The project_name"
        required: true
        type: "string"
      responses:
        200:
          description: "The id associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/posts:
    get:
      tags:
      - "Project"
      - "Post"
      description: "Get posts of a `Project`.\n"
      operationId: "getAllProjectPosts"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `reviews` associated with the `Project`"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      - "Post"
      description: "Set posts of a `Project`.\n"
      operationId: "setAllProjectPosts"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "posts"
        in: "formData"
        description: "The `ids` of the posts"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "Post"
      description: "Add to posts of a `Project`.\n"
      operationId: "addProjectPosts"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "reviews"
        in: "formData"
        description: "The `ids` of the posts"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "Post"
      description: "Remove all 'posts' from a `Project`.\n"
      operationId: "deleteProjectPosts"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/posts/{post_id}:
    get:
      tags:
      - "Project"
      - "Post"
      description: "Check if `Post` is on a `Project`\n"
      operationId: "isPostOnProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "post_id"
        in: "path"
        description: "The `id` of the post"
        required: true
        type: "string"
      responses:
        200:
          description: "The post"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "Post"
      description: "Add post to a `Project`.\n"
      operationId: "addProjectPost"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "post_id"
        in: "path"
        description: "The `id` of the post"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "Post"
      description: "Remove a 'post' from a `Project`.\n"
      operationId: "deleteProjectPost"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "post_id"
        in: "path"
        description: "The `ids` of the post"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/private:
    get:
      tags:
      - "Project"
      description: "Retrieve is_private from a  `Project`.\n"
      operationId: "isProjectPrivate"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      description: "Set is_private from a  `Project`.\n"
      operationId: "setIsProjectPrivate"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "is_private"
        in: "formData"
        description: "is project private?"
        required: true
        type: "boolean"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/project_name:
    get:
      tags:
      - "Project"
      description: "Retrieve project_name associated with a `Project`.\n"
      operationId: "getProjectNameById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The project_name"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      description: "Delete project_name from a project\n"
      operationId: "deleteUserProjectName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_name` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/reviews:
    get:
      tags:
      - "Project"
      - "Review"
      description: "Get reviews of a `Project`.\n"
      operationId: "getAllProjectReviews"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `reviews` associated with the `Project`"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      - "Review"
      description: "Set reviews of a `Project`.\n"
      operationId: "setAllProjectReviews"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "reviews"
        in: "formData"
        description: "The `ids` of the reviews"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "Review"
      description: "Add to reviews of a `Project`.\n"
      operationId: "addProjectReviews"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "reviews"
        in: "formData"
        description: "The `ids` of the reviews"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "Review"
      description: "Remove all 'reviews' from a `Project`.\n"
      operationId: "deleteProjectReviews"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/reviews/{review_id}:
    get:
      tags:
      - "Project"
      - "Review"
      description: "Check if `Review` of a `Project` if it is on project\n"
      operationId: "isReviewOnOProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "review_id"
        in: "path"
        description: "The `id` of the review"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "Review"
      description: "Add review to a `Project`.\n"
      operationId: "addProjectReview"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "review_id"
        in: "path"
        description: "The `id` of the review"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "Review"
      description: "Remove a 'review' from a `Project`.\n"
      operationId: "deleteProjectReview"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "review_id"
        in: "path"
        description: "The `ids` of the review"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/uni:
    get:
      tags:
      - "Project"
      - "University"
      description: "Retrieve universities associated with a `Project`.\n"
      operationId: "getUniversitiesById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The grant"
          schema:
            $ref: "#/definitions/University"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      - "University"
      description: "Delete all universities from a project\n"
      operationId: "deleteProjecUniversities"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/uni/{university_id}:
    get:
      tags:
      - "Project"
      - "University"
      description: "Check if project descript of `Project` is some value\n"
      operationId: "isUniversityOnProject"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "university_id"
        in: "path"
        description: "The id of the `University`"
        required: true
        type: "string"
      responses:
        200:
          description: "The post"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      - "University"
      description: "Set university_id to a `Project`.\n"
      operationId: "setProjectUniversity"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "university_id"
        in: "path"
        description: "The university_id"
        required: true
        type: "string"
      responses:
        200:
          description: "The id associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      - "University"
      description: "Modify university_id of a `Project`.\n"
      operationId: "modifyProjectUniversity"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "university_id"
        in: "path"
        description: "The university_id"
        required: true
        type: "string"
      responses:
        200:
          description: "The id associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Project/{id}/urls:
    get:
      tags:
      - "Project"
      description: "Get urls of a `Project`.\n"
      operationId: "getAllProjectUrls"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `urls` associated with the `Project`"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    post:
      tags:
      - "Project"
      description: "Set urls of a `Project`.\n"
      operationId: "setAllProjectUrls"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "urls"
        in: "formData"
        description: "The `urls` of the project"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    put:
      tags:
      - "Project"
      description: "Add to urls of a `Project`.\n"
      operationId: "addProjectUrls"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      - name: "urls"
        in: "formData"
        description: "The `urls` of the `Project``"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
    delete:
      tags:
      - "Project"
      description: "Remove all 'urls' from a `Project`.\n"
      operationId: "deleteProjectUrls"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Projects:
    get:
      tags:
      - "Project"
      description: "Gets `Project` objects.\nRequired query param of **size** determines\n\
        max number of results per page, and **page** determines\nwhich page in the\
        \ pagination we are. Remaining params optional.\n"
      operationId: "getProjects"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "size"
        in: "formData"
        description: "Max size of array to return"
        required: true
        type: "number"
        format: "int32"
      - name: "page"
        in: "formData"
        description: "Location in pagination"
        required: true
        type: "number"
        format: "int32"
      - name: "project_id"
        in: "formData"
        description: "Unique identifier representing a specific project"
        required: false
        type: "string"
      - name: "created_date"
        in: "formData"
        description: "datetime stamp of project creation"
        required: false
        type: "string"
        format: "date-time"
      - name: "updated_date"
        in: "formData"
        description: "datetime stamp of project update"
        required: false
        type: "string"
        format: "date-time"
      - name: "project_name"
        in: "formData"
        description: "Project's name"
        required: false
        type: "string"
      - name: "project_main_grant_type"
        in: "formData"
        description: "Project's grant type"
        required: false
        type: "string"
      - name: "project_description"
        in: "formData"
        description: "Description of project"
        required: false
        type: "string"
      - name: "project_creator_id"
        in: "formData"
        description: "array of project creator ids"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "project_collaborators_id"
        in: "formData"
        description: "array of project collaborator ids"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "project_keywords"
        in: "formData"
        description: "array of project keywords"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "project_urls"
        in: "formData"
        description: "array of project URLs"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "grant_id"
        in: "formData"
        description: "Grant ID"
        required: false
        type: "string"
      - name: "university_id"
        in: "formData"
        description: "ID of university hosting research"
        required: false
        type: "string"
      - name: "grant_facilitator"
        in: "formData"
        description: "Name of individual fascilitating grant funding"
        required: false
        type: "string"
      - name: "project_file"
        in: "formData"
        description: "files for grant"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "reviews"
        in: "formData"
        description: "reviews"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "posts"
        in: "formData"
        description: "posts related to project"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "is_project_private"
        in: "formData"
        description: "is project private?"
        required: false
        type: "boolean"
      responses:
        200:
          description: "An array of projects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Projects/collaborator/{user_id}:
    get:
      tags:
      - "Project"
      - "User"
      description: "Retrieve `Project` objects by a particular collaborator `User`\n"
      operationId: "getProjectsByCollaboratorId"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ID of 'User' to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "projects response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Projects/created_date:
    get:
      tags:
      - "Project"
      description: "Retrieve `Project` objects created on or later than given date\n"
      operationId: "getProjectsByCreatedDateForm"
      produces:
      - "application/json"
      parameters:
      - name: "created_date"
        in: "formData"
        description: "date of creation"
        required: true
        type: "string"
        format: "date-time-time"
      responses:
        200:
          description: "projects response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Projects/created_date/{created_date}:
    get:
      tags:
      - "Project"
      description: "Retrieve `Project` objects created on or later than given date\n"
      operationId: "getProjectsByCreatedDate"
      produces:
      - "application/json"
      parameters:
      - name: "created_date"
        in: "path"
        description: "date of creation"
        required: true
        type: "string"
      responses:
        200:
          description: "projects response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Projects/creator/{user_id}:
    get:
      tags:
      - "Project"
      - "User"
      description: "Retrieve `Project` objects by a particular creator `User`\n"
      operationId: "getProjectsByCreatorId"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "ID of 'User' to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "projects response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Projects/grant/{grant_id}:
    get:
      tags:
      - "Project"
      - "Grant"
      description: "Retrieve `Project` objects associated with a particular `Grant`\n"
      operationId: "getProjectsByGrantId"
      produces:
      - "application/json"
      parameters:
      - name: "grant_id"
        in: "path"
        description: "ID of 'User' to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "projects response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Projects/modified_date:
    get:
      tags:
      - "Project"
      description: "Retrieve `Project` objects modified on or later than given date\n"
      operationId: "getProjectsByModifiedDateForm"
      produces:
      - "application/json"
      parameters:
      - name: "modified_date"
        in: "formData"
        description: "date modified"
        required: true
        type: "string"
      responses:
        200:
          description: "projects response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Projects/modified_date/{modified_date}:
    get:
      tags:
      - "Project"
      description: "Retrieve `Project` objects modified on or later than given date\n"
      operationId: "getProjectsByModifiedDate"
      produces:
      - "application/json"
      parameters:
      - name: "modified_date"
        in: "path"
        description: "date modified"
        required: true
        type: "string"
      responses:
        200:
          description: "projects response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Projects/uni/{university_id}:
    get:
      tags:
      - "Project"
      - "University"
      description: "Retrieve `Project` objects at a particular `University`\n"
      operationId: "getProjectsByUniversityId"
      produces:
      - "application/json"
      parameters:
      - name: "university_id"
        in: "path"
        description: "ID of 'User' to fetch"
        required: true
        type: "string"
      responses:
        200:
          description: "users response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Project"
  /Review/{id}:
    get:
      tags:
      - "Review"
      description: "Retrieves `Review` objects by **id**.\n"
      operationId: "getReviewById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review`"
          schema:
            $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    put:
      tags:
      - "Review"
      description: "Updates `Review` objects. **id** is required,\nall others optional.\n"
      operationId: "updateReviewById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Post` name"
        required: true
        type: "string"
      - name: "review_body"
        in: "formData"
        description: "body of `Review`"
        required: false
        type: "string"
      - name: "reviewer_id"
        in: "formData"
        description: "User who wrote `Review`"
        required: false
        type: "string"
      - name: "rating"
        in: "formData"
        description: "Rating (1 <= rating <= 5)"
        required: false
        type: "number"
        format: "int32"
      responses:
        200:
          description: "A `Review` object"
          schema:
            $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    delete:
      tags:
      - "Review"
      description: "Deletes `Review` objects by **id**.\n"
      operationId: "deleteReviewById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Review/{id}/body:
    get:
      tags:
      - "Review"
      description: "Sets body of review\n"
      operationId: "getReviewBodyById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` body"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    post:
      tags:
      - "Review"
      description: "Set `Review` body. \n"
      operationId: "setReviewBodyById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` name"
        required: true
        type: "string"
      - name: "body"
        in: "formData"
        required: true
        type: "string"
      responses:
        200:
          description: "A `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    put:
      tags:
      - "Review"
      description: "Updates `Review` body. \n"
      operationId: "updateReviewBodyById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` name"
        required: true
        type: "string"
      - name: "body"
        in: "formData"
        required: true
        type: "string"
      responses:
        200:
          description: "A `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    delete:
      tags:
      - "Review"
      description: "Deletes `Review` body\n"
      operationId: "deleteReviewBodyById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` name"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Review/{id}/created:
    get:
      tags:
      - "Review"
      description: "Gets review created date\n"
      operationId: "getReviewCreatedDateById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` create date"
          schema:
            type: "string"
            format: "date-time"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Review/{id}/rating:
    get:
      tags:
      - "Review"
      description: "Gets rating of review\n"
      operationId: "getReviewRatingById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` rating"
          schema:
            type: "number"
            format: "int32"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    delete:
      tags:
      - "Review"
      description: "Deletes `Review` rating\n"
      operationId: "deleteReviewRating"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Review/{id}/rating/{rating}:
    get:
      tags:
      - "Review"
      description: "Is rating equal to what we pass in\n"
      operationId: "isReviewRating"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      - name: "rating"
        in: "path"
        description: "The `Review` rating"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    post:
      tags:
      - "Review"
      description: "Sets `Review` rating\n"
      operationId: "setReviewRating"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      - name: "rating"
        in: "path"
        description: "The `Review` rating"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    put:
      tags:
      - "Review"
      description: "Updates `Review` rating\n"
      operationId: "updateReviewRating"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      - name: "rating"
        in: "path"
        description: "The `Review` rating"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Review/{id}/reviewer:
    get:
      tags:
      - "Review"
      - "User"
      description: "Gets reviewer of review\n"
      operationId: "getReviewReviewerById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` reviewer user id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    delete:
      tags:
      - "Review"
      - "User"
      description: "Deletes `Review` reviewer\n"
      operationId: "deleteReviewReviewer"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Review/{id}/reviewer/{user_id}:
    get:
      tags:
      - "Review"
      - "User"
      description: "Is user the reviewer?\n"
      operationId: "isUserReviewReviewer"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    post:
      tags:
      - "Review"
      - "User"
      description: "Set `Review` reviewer. \n"
      operationId: "setReviewReviewerById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` name"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    put:
      tags:
      - "Review"
      - "User"
      description: "Updates `Review` reviewer. \n"
      operationId: "updateReviewReviewerById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` name"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "A `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    delete:
      tags:
      - "Review"
      - "User"
      description: "Deletes `Review` reviewer\n"
      operationId: "deleteReviewReviewerById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      - name: "user_id"
        in: "path"
        description: "The `Review` reviewer id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Review/{id}/updated:
    get:
      tags:
      - "Review"
      description: "Gets review updated date\n"
      operationId: "getReviewUpdatedDateById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` update date"
          schema:
            type: "string"
            format: "date-time"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Review/{id}/url:
    get:
      tags:
      - "Review"
      description: "Gets url of review\n"
      operationId: "getReviewUrlById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` url"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    post:
      tags:
      - "Review"
      description: "Sets `Review` url\n"
      operationId: "setReviewUrl"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      - name: "url"
        in: "formData"
        description: "The `Review` url"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    put:
      tags:
      - "Review"
      description: "Updates `Review` url\n"
      operationId: "updateReviewUrl"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      - name: "url"
        in: "formData"
        description: "The `Review` url"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
    delete:
      tags:
      - "Review"
      description: "Deletes `Review` url\n"
      operationId: "deleteReviewUrl"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `Review` id"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Review` id"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Reviews:
    get:
      tags:
      - "Review"
      description: "Gets `Review` objects.\nRequired query param of **size** determines\n\
        max number of results per page, and **page** determines\nwhich page in the\
        \ pagination we are. Remaining params optional.\n"
      operationId: "getReviewss"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "size"
        in: "formData"
        description: "Max size of array to return"
        required: true
        type: "number"
        format: "int32"
      - name: "page"
        in: "formData"
        description: "Location in pagination"
        required: true
        type: "number"
        format: "int32"
      - name: "review_id"
        in: "formData"
        description: "Unique identifier representing a specific `Review`"
        required: false
        type: "string"
      - name: "created_date"
        in: "formData"
        description: "datetime stamp of `Review` creation"
        required: false
        type: "string"
        format: "date-time"
      - name: "updated_date"
        in: "formData"
        description: "datetime stamp of `Review` update"
        required: false
        type: "string"
        format: "date-time"
      - name: "reviewer_id"
        in: "formData"
        description: "id of `User` reviewer"
        required: false
        type: "string"
      - name: "review_body"
        in: "formData"
        description: "body of `Review`"
        required: false
        type: "string"
      - name: "rating"
        in: "formData"
        description: "Integer rating of review (1-5)"
        required: false
        type: "number"
        format: "int32"
      responses:
        200:
          description: "An array of `Review` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Reviews/created_date:
    get:
      tags:
      - "Review"
      description: "Retrieve `Grant` objects created on or later than given date\n"
      operationId: "getReviewsByCreatedDateForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "created_date"
        in: "formData"
        description: "date of creation"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "Array of `Reviews` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Reviews/created_date/{created_date}:
    get:
      tags:
      - "Review"
      description: "Retrieve `Reviews` objects created on or later than given date\n"
      operationId: "getReviewsByCreatedDate"
      produces:
      - "application/json"
      parameters:
      - name: "created_date"
        in: "path"
        description: "date of creation"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of `Grant` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grant"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Reviews/modified_date:
    get:
      tags:
      - "Review"
      description: "Retrieve `Review` objects modified on or later than given date\n"
      operationId: "getReviewssByModifiedDateForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "modified_date"
        in: "formData"
        description: "date of modification"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "Array of `Review` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Reviews/modified_date/{modified_date}:
    get:
      tags:
      - "Review"
      description: "Retrieve `Review` objects created on or later than given date\n"
      operationId: "getReviewsByModifiedDate"
      produces:
      - "application/json"
      parameters:
      - name: "modified_date"
        in: "path"
        description: "date of creation"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of `Reviews` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Reviews/rating:
    get:
      tags:
      - "Review"
      description: "Retrieve `Review` objects with a rating in the given range\n"
      operationId: "getReviewsByRating"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "min"
        in: "formData"
        description: "Minimum rating (>= 1)"
        required: true
        type: "number"
        format: "int32"
      - name: "max"
        in: "formData"
        description: "Maximum rating (<= 5)"
        required: true
        type: "number"
        format: "int32"
      responses:
        200:
          description: "Array of `Reviews` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Reviews/rating/min/{rating}:
    get:
      tags:
      - "Review"
      description: "Retrieve `Review` objects with a rating greater than or equal\
        \ to **rating**\n"
      operationId: "getReviewsByMinRating"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "rating"
        in: "path"
        description: "Minimum rating (1 <= rating <= 5)"
        required: true
        type: "number"
        format: "int32"
      responses:
        200:
          description: "Array of `Reviews` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /Reviews/reviewer/{user_id}:
    get:
      tags:
      - "Review"
      - "User"
      description: "Retrieve `Review` objects with specified reviewer\n"
      operationId: "getReviewsByReviewer"
      produces:
      - "application/json"
      parameters:
      - name: "user_id"
        in: "path"
        description: "id of `User` reviewer"
        required: true
        type: "string"
      responses:
        200:
          description: "Array of `Reviews` objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Review"
  /User:
    post:
      tags:
      - "User"
      description: "Creates `User` objects. `University` and `Project` are optional\
        \ (user may not yet have affiliations)\n`Keywords` also optional. All other\
        \ fields required.\n"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "first_name"
        in: "formData"
        description: "first name of `User`"
        required: true
        type: "string"
      - name: "last_name"
        in: "formData"
        description: "last name of `User`"
        required: true
        type: "string"
      - name: "is_collaborator"
        in: "formData"
        description: "is `User` a collaborator?"
        required: true
        type: "boolean"
      - name: "is_creator"
        in: "formData"
        description: "is `User` a creator?"
        required: true
        type: "boolean"
      - name: "city"
        in: "formData"
        description: "city location of `User`"
        required: true
        type: "string"
      - name: "state"
        in: "formData"
        description: "state location of `User`"
        required: true
        type: "string"
      - name: "university_ids"
        in: "formData"
        description: "university a `User` is associated with"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      - name: "project_id"
        in: "formData"
        description: "project_id the `User` is associated with"
        required: false
        type: "string"
      - name: "keywords"
        in: "formData"
        description: "keyword"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` of the created user"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}:
    get:
      tags:
      - "User"
      description: "Retrieve a 'User' by their id.\n"
      operationId: "getUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "the `id` of the `User` to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the deleted `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "User"
      description: "Updates a `User` object. All fields other than `id` optional.\n"
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of `User` to fetch"
        required: true
        type: "string"
      - name: "first_name"
        in: "formData"
        description: "first name of `User`"
        required: false
        type: "string"
      - name: "last_name"
        in: "formData"
        description: "last name of `User`"
        required: false
        type: "string"
      - name: "is_collaborator"
        in: "formData"
        description: "is `User` a collaborator?"
        required: false
        type: "boolean"
      - name: "is_creator"
        in: "formData"
        description: "is `User` a creator?"
        required: false
        type: "boolean"
      - name: "city"
        in: "formData"
        description: "city location of `User`"
        required: false
        type: "string"
      - name: "state"
        in: "formData"
        description: "state location of `User`"
        required: false
        type: "string"
      - name: "university"
        in: "formData"
        description: "university a `User` is associated with"
        required: false
        type: "string"
      - name: "project_id"
        in: "formData"
        description: "project_id the `User` is associated with"
        required: false
        type: "string"
      - name: "keywords"
        in: "formData"
        description: "keyword"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `id` of the updatee `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      description: "Delete a 'User' by their id.\n"
      operationId: "deleteUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "the `id` of the `User` to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "The `id` of the deleted `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/city:
    get:
      tags:
      - "User"
      description: "Retrieve city associated with a `User`.\n"
      operationId: "getCityNameById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The city"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      description: "Delete city from a user\n"
      operationId: "deleteUserCity"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/city/{city}:
    get:
      tags:
      - "User"
      description: "Check if city is on `User`.\n"
      operationId: "isUserCity"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "city"
        in: "path"
        description: "The city"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      description: "Add city to a `User`.\n"
      operationId: "addUserCity"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "city"
        in: "path"
        description: "The city"
        required: true
        type: "string"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "User"
      description: "Modify city of a `User`.\n"
      operationId: "modifyUserCity"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "city"
        in: "path"
        description: "The city"
        required: true
        type: "string"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/collaborator:
    get:
      tags:
      - "User"
      description: "Retrieve if `User` is a collaborator.\n"
      operationId: "isCollaboratorById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of keywords"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      description: "set if `User` is a collaborator.\n"
      operationId: "setIsUserCollaboratorById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "isCollaborator"
        in: "formData"
        description: "Is user a collaborator?"
        required: true
        type: "boolean"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "User"
      description: "set if `User` is a collaborator.\n"
      operationId: "setIsUserCollaboratorByIdPut"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "isCollaborator"
        in: "formData"
        description: "Is user a collaborator?"
        required: true
        type: "boolean"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/created:
    get:
      tags:
      - "User"
      description: "Retrieve creation date of a `User`.\n"
      operationId: "getCreatedDateById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The date"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/creator:
    get:
      tags:
      - "User"
      description: "Retrieve if `User` is a creator.\n"
      operationId: "isCreatorById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of keywords"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      description: "set if `User` is a creator.\n"
      operationId: "setIsUserCreatorById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "isCreator"
        in: "formData"
        description: "Is user a creator?"
        required: true
        type: "boolean"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "User"
      description: "set if `User` is a creator.\n"
      operationId: "setIsUserCreatorByIdPut"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "isCollaborator"
        in: "formData"
        description: "Is user a creator?"
        required: true
        type: "boolean"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/first_name:
    get:
      tags:
      - "User"
      description: "Retrieve first name associated with a `User`.\n"
      operationId: "getFirstNameById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of keywords"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      - "Review"
      description: "Delete first_name from a user\n"
      operationId: "deleteUserFirstName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/first_name/{first_name}:
    get:
      tags:
      - "User"
      description: "Check if first name is on `User`\n"
      operationId: "isUserFirstName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "first_name"
        in: "path"
        description: "The keywords"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      description: "Add first name to a `User`.\n"
      operationId: "addUserFirstName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "first_name"
        in: "path"
        description: "The keywords"
        required: true
        type: "string"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "User"
      description: "Modify first name of a `User`.\n"
      operationId: "modifyUserFirstName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "first_name"
        in: "path"
        description: "The keywords"
        required: true
        type: "string"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/images:
    get:
      tags:
      - "User"
      description: "Retrieve all images associated with a `User`.\n"
      operationId: "getAllUserImages"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The image url associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      description: "Add images to a `User`.\n"
      operationId: "setUserImages"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "images"
        in: "formData"
        description: "The paths of the images"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      description: "Remove an image, or multiple images, from a `User`.\n"
      operationId: "deleteImagesFromUserById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "images"
        in: "formData"
        description: "The paths of the images"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/keys:
    get:
      tags:
      - "User"
      description: "Retrieve all keywords associated with a `User`.\n"
      operationId: "getAllUserKeywords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of keywords"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      description: "Add keywords to a `User`.\n"
      operationId: "setUserKeywords"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "keywords"
        in: "formData"
        description: "The keywords"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      description: "Delete keywords from a user\n"
      operationId: "deleteKeywordsFromUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/keys/{keyword}:
    get:
      tags:
      - "User"
      description: "Check if a keyword is on a `User`.\n"
      operationId: "isUserHaveKeyword"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "The keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      description: "Add a keyword to a `User`.\n"
      operationId: "setUserKeyword"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "The keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      description: "Delete keyword from a user\n"
      operationId: "deleteKeywordFromUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "keyword"
        in: "path"
        description: "The keyword"
        required: true
        type: "string"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/last_name:
    get:
      tags:
      - "User"
      description: "Retrieve first name associated with a `User`.\n"
      operationId: "getLastNameById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of keywords"
          schema:
            type: "array"
            items:
              type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      description: "Delete last_name from a user\n"
      operationId: "deleteUserLastName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/last_name/{last_name}:
    get:
      tags:
      - "User"
      description: "Check if last name is on `User`.\n"
      operationId: "isUserLastName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "last_name"
        in: "path"
        description: "The keywords"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      description: "Add last name to a `User`.\n"
      operationId: "addUserLastName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "last_name"
        in: "path"
        description: "The keywords"
        required: true
        type: "string"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "User"
      description: "Modify last name of a `User`.\n"
      operationId: "modifyUserLastName"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "last_name"
        in: "path"
        description: "The keywords"
        required: true
        type: "string"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/modified:
    get:
      tags:
      - "User"
      description: "Retrieve modified date of a `User`.\n"
      operationId: "getModifiedDateById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The date"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/project:
    get:
      tags:
      - "User"
      - "Project"
      description: "Retrieve all 'Project' associated with a `User`.\n"
      operationId: "getAllUserProjectById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `Project` associated with the `User`"
          schema:
            $ref: "#/definitions/Project"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      - "Project"
      description: "Remove all 'Project' ojects from a `User`.\n"
      operationId: "deleteAllUserProjectById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/project/{project_id}:
    get:
      tags:
      - "User"
      - "Project"
      description: "Is 'Project' associated with a `User`?\n"
      operationId: "isUserOnProjectById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "project_id"
        in: "path"
        description: "The `project_id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      - "Project"
      description: "Add a 'Project' to a `User`.\n"
      operationId: "settUserProjectById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "project_id"
        in: "path"
        description: "The `project_id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      - "Project"
      description: "Remove a 'Project' from a `User`.\n"
      operationId: "deleteUserProjectById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "project_id"
        in: "path"
        description: "The `project_id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/review:
    get:
      tags:
      - "User"
      - "Review"
      description: "Retrieve all 'Review' associated with a `User`.\n"
      operationId: "getAllUserReviewById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "An array of reviews"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      - "Review"
      description: "Remove all 'Review' ojects from a `User`.\n"
      operationId: "deleteAllUserReviewById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/review/{review_id}:
    get:
      tags:
      - "User"
      - "Review"
      description: "Is a 'Review' associated with a `User`??\n"
      operationId: "isReviewOnUserById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "review_id"
        in: "path"
        description: "The `review_id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      - "Review"
      description: "Add a 'Review' to a `User`.\n"
      operationId: "setUserReviewById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "review_id"
        in: "path"
        description: "The `review_id` of the `Review` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `review_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      - "Review"
      description: "Remove a 'Review' from a `User`.\n"
      operationId: "deleteUserReviewById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "review_id"
        in: "path"
        description: "The `review_id` of the `Review` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `review_id` associated with the `Review`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/state:
    get:
      tags:
      - "User"
      description: "Retrieve state associated with a `User`.\n"
      operationId: "getStateById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The state"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      description: "Delete state from a user\n"
      operationId: "deleteUserState"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `user_id` associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/state/{state}:
    get:
      tags:
      - "User"
      description: "Check if state is on `User`.\n"
      operationId: "isUserState"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "state"
        in: "path"
        description: "The state"
        required: true
        type: "string"
      responses:
        200:
          description: "The boolean"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      description: "Add state to a `User`.\n"
      operationId: "addUserState"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "state"
        in: "path"
        description: "The state"
        required: true
        type: "string"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "User"
      description: "Modify state of a `User`.\n"
      operationId: "modifyUserState"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "state"
        in: "path"
        description: "The state"
        required: true
        type: "string"
      responses:
        200:
          description: "The user_id associated with the `User`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /User/{id}/uni/{university_id}:
    get:
      tags:
      - "User"
      - "University"
      description: "Is 'University' associated with a `User`?\n"
      operationId: "isUniversityOnUser"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "university_id"
        in: "path"
        description: "The `university_id` of the `University` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `University` associated with the `User`"
          schema:
            type: "boolean"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    post:
      tags:
      - "User"
      - "University"
      description: "Add a 'University' to a `User`.\n"
      operationId: "settUserUniversityById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "university_id"
        in: "path"
        description: "The `university_id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `university_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "User"
      - "University"
      description: "Remove a 'University' fromo a `User`.\n"
      operationId: "deleteUserUniversityById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The `id` of the `User` to retrieve"
        required: true
        type: "string"
      - name: "university_id"
        in: "path"
        description: "The `university_id` of the `Project` to retrieve"
        required: true
        type: "string"
      responses:
        200:
          description: "The `project_id` associated with the `Project`"
          schema:
            type: "string"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /Users:
    get:
      tags:
      - "User"
      description: "Gets `User` objects.\nRequired query param of **size** determines\n\
        max number of results per page, and **page** determines\nwhich page in the\
        \ pagination we are. Remaining params optional.\n"
      operationId: "getUsers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "size"
        in: "formData"
        description: "Max size of array to return"
        required: true
        type: "number"
        format: "int32"
      - name: "page"
        in: "formData"
        description: "Location in pagination"
        required: true
        type: "number"
        format: "int32"
      - name: "first_name"
        in: "formData"
        description: "first name of user"
        required: false
        type: "string"
      - name: "last_name"
        in: "formData"
        description: "last name of user"
        required: false
        type: "string"
      - name: "is_collaborator"
        in: "formData"
        description: "is user a collaborator?"
        required: false
        type: "boolean"
      - name: "is_creator"
        in: "formData"
        description: "is user a creator?"
        required: false
        type: "boolean"
      - name: "city"
        in: "formData"
        description: "city location of user"
        required: false
        type: "string"
      - name: "state"
        in: "formData"
        description: "state location of user"
        required: false
        type: "string"
      - name: "university_ids"
        in: "formData"
        description: "universities a user is associated with"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      - name: "project_id"
        in: "formData"
        description: "project_id the user is associated with"
        required: false
        type: "string"
      - name: "created_date"
        in: "formData"
        description: "date the user was created"
        required: false
        type: "string"
      - name: "modified_date"
        in: "formData"
        description: "date the user was modified"
        required: false
        type: "string"
      - name: "keywords"
        in: "formData"
        description: "keyword"
        required: false
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "An array of users"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /Users/created:
    get:
      tags:
      - "User"
      description: "Retrieve `User` objects created on or after the given date2\n"
      operationId: "getUsersByCreatedDateForm"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "created_date"
        in: "formData"
        description: "Date that `User` object was created"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "users response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /Users/created/{created_date}:
    get:
      tags:
      - "User"
      description: "Retrieve `User` objects created on or after the given date\n"
      operationId: "getUsersByCreatedDate"
      produces:
      - "application/json"
      parameters:
      - name: "created_date"
        in: "path"
        description: "Date that `User` object was created"
        required: true
        type: "string"
      responses:
        200:
          description: "users response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /Users/keys:
    get:
      tags:
      - "User"
      description: "Retrieve `User` objects based on keywords\n"
      operationId: "getUsersByKeywords"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "keywords"
        in: "formData"
        description: "Keywords when searching for user"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "csv"
      responses:
        200:
          description: "users response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /Users/modified/{modified_date}:
    get:
      tags:
      - "User"
      description: "Retrieve `User` objects created on or after the given date\n"
      operationId: "getUsersByModifiedDate"
      produces:
      - "application/json"
      parameters:
      - name: "modified_date"
        in: "path"
        description: "Date that `User` object was modified"
        required: true
        type: "string"
      responses:
        200:
          description: "users response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /Users/modified_date:
    get:
      tags:
      - "User"
      description: "Retrieve `User` objects created on or after the given date\n"
      operationId: "getUsersByModifiedDateForm"
      produces:
      - "application/json"
      parameters:
      - name: "modified_date"
        in: "formData"
        description: "Date that `User` object was modified"
        required: true
        type: "string"
        format: "date-time"
      responses:
        200:
          description: "users response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /Users/projects/{project_id}:
    get:
      tags:
      - "User"
      - "Project"
      description: "Retrieve `User` objects on a particular `Project`\n"
      operationId: "getUsersByProjectId"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project_id"
        in: "path"
        description: "ID of 'Project' to fetch"
        required: true
        type: "string"
      - name: "max"
        in: "formData"
        description: "max num of 'User' to fetch"
        required: true
        type: "number"
        format: "int32"
      - name: "page"
        in: "formData"
        description: "page in pagination"
        required: true
        type: "number"
        format: "int32"
      responses:
        200:
          description: "users response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
  /Users/uni/{university_id}:
    get:
      tags:
      - "User"
      - "University"
      description: "Retrieve `User` objects at a particular `University`\n"
      operationId: "getUsersByUniversityId"
      produces:
      - "application/json"
      parameters:
      - name: "university_id"
        in: "path"
        description: "ID of 'User' to fetch"
        required: true
        type: "string"
      - name: "max"
        in: "formData"
        description: "max num of 'User' to fetch"
        required: true
        type: "number"
        format: "int32"
      - name: "page"
        in: "formData"
        description: "page in pagination"
        required: true
        type: "number"
        format: "int32"
      responses:
        200:
          description: "users response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "User"
definitions:
  User:
    type: "object"
    properties:
      user_id:
        type: "string"
        description: "Unique identifier representing a specific user"
      first_name:
        type: "string"
        description: "User's first name."
      last_name:
        type: "string"
        description: "User's last name"
      is_creator:
        type: "boolean"
        description: "Is user a project creator?"
      is_collaborator:
        type: "boolean"
        description: "Is user a project collaborator?"
      profile_images:
        type: "array"
        description: "Array of file system paths to profile images"
        items:
          type: "string"
      created_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of user creation"
      updated_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of user update"
      geolocation:
        type: "array"
        description: "Tuple representing latitude/longitude of user"
        items:
          type: "number"
          format: "double"
      city:
        type: "string"
        description: "City of user location"
      state:
        type: "string"
        description: "State of user location"
      recent_collaborators_id:
        type: "array"
        description: "array of user_ids of recent collaborators"
        items:
          type: "string"
      university_ids:
        type: "array"
        description: "array of universities the user is associated with"
        items:
          type: "string"
      project_ids:
        type: "array"
        description: "array of user projects"
        items:
          type: "string"
      keywords:
        type: "array"
        description: "array of keywords associated with the user"
        items:
          type: "string"
      review_ids:
        type: "array"
        description: "array of review ids"
        items:
          type: "string"
      is_user_private:
        type: "boolean"
        description: "is user profile public or private?"
  Users:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int32"
        description: "Position in pagination."
      limit:
        type: "integer"
        format: "int32"
        description: "Number of items to retrieve (100 max)."
      count:
        type: "integer"
        format: "int32"
        description: "Total number of items available."
      history:
        type: "array"
        items:
          $ref: "#/definitions/User"
  Project:
    type: "object"
    properties:
      project_id:
        type: "string"
        description: "Unique identifier representing a specific project"
      created_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of project creation"
      updated_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of project update"
      project_name:
        type: "string"
        description: "Project's name"
      project_main_grant_type:
        type: "string"
        description: "Project's grant type"
      project_description:
        type: "string"
        description: "Description of project"
      project_creator_id:
        type: "array"
        description: "array of project creator ids"
        items:
          type: "string"
      project_collaborators_id:
        type: "array"
        description: "array of project collaborator ids"
        items:
          type: "string"
      project_keywords:
        type: "array"
        description: "array of project keywords"
        items:
          type: "string"
      project_urls:
        type: "array"
        description: "array of project URLs"
        items:
          type: "string"
      grant_id:
        type: "string"
        description: "Grant ID"
      university_id:
        type: "string"
        description: "ID of university hosting research"
      grant_facilitator:
        type: "string"
        description: "Name of individual fascilitating grant funding"
      project_file:
        type: "array"
        description: "files for grant"
        items:
          type: "string"
      reviews:
        type: "array"
        description: "reviews"
        items:
          type: "string"
      posts:
        type: "array"
        description: "posts related to project"
        items:
          type: "string"
      is_project_private:
        type: "boolean"
        description: "is project private?"
  Projects:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int32"
        description: "Position in pagination."
      limit:
        type: "integer"
        format: "int32"
        description: "Number of items to retrieve (100 max)."
      count:
        type: "integer"
        format: "int32"
        description: "Total number of items available."
      history:
        type: "array"
        items:
          $ref: "#/definitions/Project"
  Post:
    type: "object"
    properties:
      post_id:
        type: "string"
        description: "id of post"
      created_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of post creation"
      updated_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of post update"
      post_title:
        type: "string"
        description: "title of post"
      post_text:
        type: "string"
        description: "text of post"
      post_keywords:
        type: "array"
        description: "keywords for post"
        items:
          type: "string"
      post_author:
        description: "author of post"
        $ref: "#/definitions/User"
      post_author_id:
        type: "string"
        description: "id of author of post"
      post_tags:
        type: "array"
        description: "tagged users"
        items:
          $ref: "#/definitions/User"
      post_tags_id:
        type: "array"
        description: "tagged user ids"
        items:
          type: "string"
      is_post_private:
        type: "boolean"
        description: "is post private?"
  Posts:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int32"
        description: "Position in pagination."
      limit:
        type: "integer"
        format: "int32"
        description: "Number of items to retrieve (100 max)."
      count:
        type: "integer"
        format: "int32"
        description: "Total number of items available."
      history:
        type: "array"
        items:
          $ref: "#/definitions/Post"
  Grant:
    type: "object"
    properties:
      grant_id:
        type: "string"
        description: "id of grant"
      created_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of grant creation"
      updated_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of grant update"
      grant_url:
        type: "array"
        description: "URL of grants"
        items:
          type: "string"
      grant_keywords:
        type: "array"
        description: "grant keywords"
        items:
          type: "string"
      grant_description:
        type: "string"
        description: "Grant description"
      grant_amount:
        type: "number"
        format: "double"
        description: "Amount of grant"
  Grants:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int32"
        description: "Position in pagination."
      limit:
        type: "integer"
        format: "int32"
        description: "Number of items to retrieve (100 max)."
      count:
        type: "integer"
        format: "int32"
        description: "Total number of items available."
      history:
        type: "array"
        items:
          $ref: "#/definitions/Grant"
  Review:
    type: "object"
    properties:
      review_id:
        type: "string"
        description: "id of review"
      created_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of review creation"
      updated_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of review update"
      review_body:
        type: "string"
        description: "text body of review"
      reviewer:
        description: "reviewer user"
        $ref: "#/definitions/User"
      reviewer_id:
        type: "string"
        description: "reviewer user id"
      rating:
        type: "integer"
        format: "int32"
        description: "rating, must be 1-5"
  Reviews:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int32"
        description: "Position in pagination."
      limit:
        type: "integer"
        format: "int32"
        description: "Number of items to retrieve (100 max)."
      count:
        type: "integer"
        format: "int32"
        description: "Total number of items available."
      history:
        type: "array"
        items:
          $ref: "#/definitions/Review"
  Skill:
    type: "object"
    properties:
      review_id:
        type: "string"
        description: "id of skill"
      created_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of skill creation"
      updated_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of skill update"
      description:
        type: "string"
        description: "text body of skill"
      endorsements_id:
        type: "array"
        description: "ids of users who have endorsed the user for this skill"
        items:
          type: "string"
  Skills:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int32"
        description: "Position in pagination."
      limit:
        type: "integer"
        format: "int32"
        description: "Number of items to retrieve (100 max)."
      count:
        type: "integer"
        format: "int32"
        description: "Total number of items available."
      history:
        type: "array"
        items:
          $ref: "#/definitions/Skill"
  University:
    type: "object"
    properties:
      uni_id:
        type: "string"
        description: "id of `University`"
      created_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of `University` creation"
      updated_date:
        type: "string"
        format: "date-time"
        description: "datetime stamp of `University` update"
      university_name:
        type: "string"
        description: "text body of `University`"
      profile_images:
        type: "array"
        description: "Array of file system paths to profile images"
        items:
          type: "string"
      geolocation:
        type: "array"
        description: "Tuple representing latitude/longitude of user"
        items:
          type: "number"
          format: "double"
      city:
        type: "string"
        description: "City of `University` location"
      state:
        type: "string"
        description: "State of `University` location"
      project_ids:
        type: "array"
        description: "ids of `Project`s based at this `University`"
        items:
          type: "string"
  Universities:
    type: "object"
    properties:
      offset:
        type: "integer"
        format: "int32"
        description: "Position in pagination."
      limit:
        type: "integer"
        format: "int32"
        description: "Number of items to retrieve (100 max)."
      count:
        type: "integer"
        format: "int32"
        description: "Total number of items available."
      history:
        type: "array"
        items:
          $ref: "#/definitions/University"
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      fields:
        type: "string"
