# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# document metadata
info:
  version: "0.0.1"
  title: ArmRay API
  description: Definition of ArmRay backend API
#This will contain the hostname
#host: armray.com
schemes:
  - http
  #once we have auth/certs going it should change to
  #- https
# will be prefixed to all paths
#placeholder in case we need this
basePath: /armray/api/0.1/rest

#I'm assumping we'll be returning json for all the calls
produces:
  - application/json
consumes:
  - application/json
#####
##So do we want endpoints for every property on an object? i.e. for project, should urls, leywords, creators, collabs, univ, etc., all have their own endpoints?
####
######################################
#################Paths################
######################################
#and now the actual api paths
paths:
  ##/Users routes
  ######################################
  #################Users################
  ######################################
  #/Users
  # get
  #Users/uni/{university_id}
  # get
  #Users/uni/{project
  # get
  #/User
  # post
  #/User/{id}
  # put, delete, get
  #/User/{id}/uni/{uniuversity_id}
  # get, post, delete
  #/User/{id}/project/{project_id}
  # get, post, delete
  #User/{id}/review/{project_id}
  #/User/{id}/review/{project_id}
  #
  #./review and
  # get only. other actions can be done just as easily specifying the idea of the already instantiated object.
  #/User/{id}/project/{review_id}
  # get, post, delete
  #/User/{id}/colaborators/{user_id}
  # get, post, delete

  #/User/{id}/universities
  # get, put, post, delete

  #/User/{id}/universities/{uni_id}
  # get, post, delete

  #/User/{id}/images/
  #get put post delete

  #/User/{id}/keys
  # get put post delete, either formBody or urlQuery
  #/User/{id}/keys/{keyword}
  # pst delete, get and put don't make sense here since we clearly already know the keyword


  #other fields
  #/User/{id}/first_name
  # get put
  #/User/{id}/last_name
  # get put
  #/User/{id}/collaborator
  # get put
  #/User/{id}/creator
  # get put
  #/User/{id}/city
  # get put
  #/User/{id}/state
  # get put
  #/User/{id}/created
  # get
  #/User/{id}/modified
  # get

  #/Users/created
  #get
  #/Users/modified
  #get
  #/Users/keys/
  # get: a keyword search
  #something with images and keywords maybe

#users search routes
  /Users:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Gets `User` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: getUsers
      produces:
        - application/json
      consumes:
        - application/json
      # This is array of GET operation parameters:
      parameters:
        -
          name: size
          in: formData
          description: Max size of array to return
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: Location in pagination
          required: true
          type: number
          format: int32
        -
          name: first_name
          in: formData
          description: first name of user
          required: false
          type: string
        -
          name: last_name
          in: formData
          description: last name of user
          required: false
          type: string
        -
          name: is_collaborator
          in: formData
          description: is user a collaborator?
          required: false
          type: boolean
        -
          name: is_creator
          in: formData
          description: is user a creator?
          required: false
          type: boolean
        -
          name: city
          in: formData
          description: city location of user
          required: false
          type: string
        -
          name: state
          in: formData
          description: state location of user
          required: false
          type: string
        -
          name: university_ids
          in: formData
          description: universities a user is associated with
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        -
          name: project_id
          in: formData
          description: project_id the user is associated with
          required: false
          type: string
        -
          name: created_date
          in: formData
          description: date the user was created
          required: false
          type: string
        -
          name: modified_date
          in: formData
          description: date the user was modified
          required: false
          type: string
        -
          name: keywords
          in: formData
          description: keyword
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      tags:
        - Users
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Users/uni/{university_id}:
      get:
        description: |
          Retrieve `User` objects at a particular `University`
        operationId: getUsersByUniversityId
        produces:
          - application/json
        parameters:
          -
            name: university_id
            in: path
            description: ID of 'User' to fetch
            required: true
            type: string
          -
            name: max
            in: formData
            description: max num of 'User' to fetch
            required: true
            type: number
            format: int32
          -
            name: page
            in: formData
            description: page in pagination
            required: true
            type: number
            format: int32
        responses:
          '200':
            description: users response
            schema:
              type: array
              items:
                $ref: '#/definitions/User'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'  
  /Users/projects/{project_id}:
    get:
      description: |
        Retrieve `User` objects on a particular `Project`
      operationId: getUsersByProjectId
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: project_id
          in: path
          description: ID of 'Project' to fetch
          required: true
          type: string
        -
          name: max
          in: formData
          description: max num of 'User' to fetch
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: page in pagination
          required: true
          type: number
          format: int32
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Users/created/{created_date}:
      get:
        description: |
          Retrieve `User` objects created on or after the given date
        operationId: getUsersByCreatedDate
        produces:
          - application/json
        parameters:
          -
            name: created_date
            in: path
            description: Date that `User` object was created
            required: true
            type: string
        responses:
          '200':
            description: users response
            schema:
              type: array
              items:
                $ref: '#/definitions/User'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'            
  /Users/created:
      get:
        description: |
          Retrieve `User` objects created on or after the given date2
        operationId: getUsersByCreatedDateForm
        produces:
          - application/json
        consumes:
          - application/json
        parameters:
          -
            name: created_date
            in: formData
            description: Date that `User` object was created
            required: true
            type: string
            format: date-time
        responses:
          '200':
            description: users response
            schema:
              type: array
              items:
                $ref: '#/definitions/User'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  /Users/modified/{modified_date}:
    get:
      description: |
        Retrieve `User` objects created on or after the given date
      operationId: getUsersByModifiedDate
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: path
          description: Date that `User` object was modified
          required: true
          type: string
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Users/modified_date:
    get:
      description: |
        Retrieve `User` objects created on or after the given date
      operationId: getUsersByModifiedDateForm
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: formData
          description: Date that `User` object was modified
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'              
  /Users/keys:
    get:
      description: |
        Retrieve `User` objects based on keywords
      operationId: getUsersByKeywords
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: keywords
          in: formData
          description: Keywords when searching for user
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  ##/User routes
  /User:
    post:
      description: |
        Creates `User` objects. `University` and `Project` are optional (user may not yet have affiliations)
        `Keywords` also optional. All other fields required.
      operationId: createUser
      produces:
        - application/json
      consumes:
        - application/json
  
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: first_name
          in: formData
          description: first name of `User`
          required: true
          type: string
        -
          name: last_name
          in: formData
          description: last name of `User`
          required: true
          type: string
        -
          name: is_collaborator
          in: formData
          description: is `User` a collaborator?
          required: true
          type: boolean
        -
          name: is_creator
          in: formData
          description: is `User` a creator?
          required: true
          type: boolean
        -
          name: city
          in: formData
          description: city location of `User`
          required: true
          type: string
        -
          name: state
          in: formData
          description: state location of `User`
          required: true
          type: string
        -
          name: university_ids
          in: formData
          description: university a `User` is associated with
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        -
          name: project_id
          in: formData
          description: project_id the `User` is associated with
          required: false
          type: string
        -
          name: keywords
          in: formData
          description: keyword
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      tags:
        - User
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: The `id` of the created user
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}:
    put:
      description: |
        Updates a `User` object. All fields other than `id` optional.
      operationId: updateUser
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: ID of `User` to fetch
          required: true
          type: string
        -
          name: first_name
          in: formData
          description: first name of `User`
          required: false
          type: string
        -
          name: last_name
          in: formData
          description: last name of `User`
          required: false
          type: string
        -
          name: is_collaborator
          in: formData
          description: is `User` a collaborator?
          required: false
          type: boolean
        -
          name: is_creator
          in: formData
          description: is `User` a creator?
          required: false
          type: boolean
        -
          name: city
          in: formData
          description: city location of `User`
          required: false
          type: string
        -
          name: state
          in: formData
          description: state location of `User`
          required: false
          type: string
        -
          name: university
          in: formData
          description: university a `User` is associated with
          required: false
          type: string
        -
          name: project_id
          in: formData
          description: project_id the `User` is associated with
          required: false
          type: string
        -
          name: keywords
          in: formData
          description: keyword
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      tags:
        - User
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: The `id` of the updatee `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete a 'User' by their id.
      operationId: deleteUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: the `id` of the `User` to delete
          required: true
          type: string
      responses:
        '200':
          description: The `id` of the deleted `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      description: |
        Retrieve a 'User' by their id.
      operationId: getUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: the `id` of the `User` to delete
          required: true
          type: string
      responses:
        '200':
          description: The `id` of the deleted `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /User/{id}/uni/{university_id}:
    get:
      description: |
        Retrieve a 'University' associated with a `User`.
      operationId: getUserUniversityById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The `university_id` of the `University` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `University` associated with the `User`
          schema:
            $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Add a 'University' to a `User`.
      operationId: settUserUniversityById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The `university_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `university_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove a 'University' fromo a `User`.
      operationId: deleteUserUniversityById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The `university_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #not going to add a PUT to modify a project, that should be done directly on the Project paths
      #redundant paths are bad            

  /User/{id}/project:
    get:
      description: |
        Retrieve all 'Project' associated with a `User`.
      operationId: getAllUserProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `Project` associated with the `User`
          schema:
            $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove all 'Project' ojects from a `User`.
      operationId: deleteAllUserProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/project/{project_id}:
    get:
      description: |
        Retrieve a 'Project' associated with a `User`.
      operationId: getUserProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: project_id
          in: path
          description: The `project_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `Project` associated with the `User`
          schema:
            $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Add a 'Project' to a `User`.
      operationId: settUserProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: project_id
          in: path
          description: The `project_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove a 'Project' from a `User`.
      operationId: deleteUserProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: project_id
          in: path
          description: The `project_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/review:
    get:
      description: |
        Retrieve all 'Review' associated with a `User`.
      operationId: getAllUserReviewById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of reviews
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove all 'Review' ojects from a `User`.
      operationId: deleteAllUserReviewById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/review/{review_id}:
    get:
      description: |
        Retrieve a 'Review' associated with a `User`.
      operationId: getUserReviewById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `review_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `Review` associated with the `User`
          schema:
            $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Add a 'Review' to a `User`.
      operationId: setUserReviewById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `review_id` of the `Review` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `review_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove a 'Review' from a `User`.
      operationId: deleteUserReviewById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `review_id` of the `Review` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `review_id` associated with the `Review`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/images:
    get:
      description: |
        Retrieve all images associated with a `User`.
      operationId: getAllUserImages
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The image url associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    #I don't think put makes sense since we'd just have to pull the array, modify it, and send it back anyway
    post:
      description: |
        Add images to a `User`.
      operationId: setUserImages
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: images
          in: formData
          description: The paths of the images
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove an image, or multiple images, from a `User`.
      operationId: deleteImagesFromUserById
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: images
          in: formData
          description: The paths of the images
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/keys:
    get:
      description: |
        Retrieve all keywords associated with a `User`.
      operationId: getAllUserKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of keywords
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    #I don't think put makes sense since we'd just have to pull the array, modify it, and send it back anyway
    post:
      description: |
        Add keywords to a `User`.
      operationId: setUserKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: keywords
          in: formData
          description: The keywords
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete keywords from a user
      operationId: deleteKeywordsFromUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/keys/{keyword}:
    post:
      description: |
        Add a keyword to a `User`.
      operationId: setUserKeyword
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The keyword
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete keyword from a user
      operationId: deleteKeywordFromUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The keyword
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/first_name:
    get:
      description: |
        Retrieve first name associated with a `User`.
      operationId: getFirstNameById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of keywords
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete first_name from a user
      operationId: deleteUserFirstName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/first_name/{first_name}:
    post:
      description: |
        Add first name to a `User`.
      operationId: addUserFirstName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: first_name
          in: path
          description: The keywords
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Modify first name of a `User`.
      operationId: modifyUserFirstName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: first_name
          in: path
          description: The keywords
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/last_name:
    get:
      description: |
        Retrieve first name associated with a `User`.
      operationId: getLastNameById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of keywords
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete last_name from a user
      operationId: deleteUserLastName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/last_name/{last_name}:
    post:
      description: |
        Add last name to a `User`.
      operationId: addUserLastName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: last_name
          in: path
          description: The keywords
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Modify last name of a `User`.
      operationId: modifyUserLastName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: last_name
          in: path
          description: The keywords
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/collaborator:
    get:
      description: |
        Retrieve if `User` is a collaborator.
      operationId: isCollaboratorById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of keywords
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        set if `User` is a collaborator.
      operationId: setIsUserCollaboratorById
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: isCollaborator
          in: formData
          description: Is user a collaborator?
          required: true
          type: boolean
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        set if `User` is a collaborator.
      operationId: setIsUserCollaboratorByIdPut
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: isCollaborator
          in: formData
          description: Is user a collaborator?
          required: true
          type: boolean
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/creator:
    get:
      description: |
        Retrieve if `User` is a creator.
      operationId: isCreatorById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of keywords
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        set if `User` is a creator.
      operationId: setIsUserCreatorById
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: isCreator
          in: formData
          description: Is user a creator?
          required: true
          type: boolean
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        set if `User` is a creator.
      operationId: setIsUserCreatorByIdPut
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: isCollaborator
          in: formData
          description: Is user a creator?
          required: true
          type: boolean
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/city:
    get:
      description: |
        Retrieve city associated with a `User`.
      operationId: getCityNameById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The city
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete city from a user
      operationId: deleteUserCity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/city/{city}:
    post:
      description: |
        Add city to a `User`.
      operationId: addUserCity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: city
          in: path
          description: The city
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Modify city of a `User`.
      operationId: modifyUserCity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: city
          in: path
          description: The city
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/state:
    get:
      description: |
        Retrieve state associated with a `User`.
      operationId: getStateById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The state
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete state from a user
      operationId: deleteUserState
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/state/{state}:
    post:
      description: |
        Add state to a `User`.
      operationId: addUserState
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: state
          in: path
          description: The state
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Modify state of a `User`.
      operationId: modifyUserState
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: state
          in: path
          description: The state
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/created:
    get:
      description: |
        Retrieve creation date of a `User`.
      operationId: getCreatedDateById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The date
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/modified:
    get:
      description: |
        Retrieve modified date of a `User`.
      operationId: getModifiedDateById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The date
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  
  
      #not going to add a PUT to modify a project, that should be done directly on the Project paths
      #redundant paths are bad
      ######################################
      ###############Projects###############
      ######################################
  
      #Projects searches, basically
      #/Projects
            #/Projects/creator/{user_id}
            # get
            #/Projects/collaborator/{user_id}
            # get
            #/Projects/keywords/
            # get, takes array in formBody? or in url query?
            #/Projects/keywords/{keyword}
            # post delete
            #/Projects/urls/
            # get, take in formbody
            #/Projects/created
            #get use formdata ?
            #/Projects/modified
            #get use formdata
  
            #/Project
            # get, put, post, delete
            #/Project/{id}
            # get, put, delete
            #/Projects/{id}/grant/{grant_type}
            # get post put(?)
            #creators should realy be immutable, and should always exist put only exists to modify in case of a mistake
            #/Project/{id}/creators
            # get put
            #/Project/{id}/creator/{user_id}
            # get put
  
            #/Project/{id}/urls
            # get put, url needs to be in formbody or in url query I guess?
  
            #/Project/collaborators/
            # get put post delete
            #/Project/collaborators/{user_id}
            # get put post delete
  
            #keywords
            #/Project/{id}/keys
            # get put post delete, either formBody or urlQuery
            #/Project/{id}/keys/{keyword}
            # pst delete, get and put don't make sense here since we clearly already know the keyword
            #files
            #/Project/{id}/files
            # get put post delete, should be in formbody or url query
            #reviews
            #/Project/{id}/reviews/{review_id}
            # get put post delete
  
            #posts
            #/Project/{id}/posts/{post_id}
            # get put post delete
  
  
            #other fields
            #/Project/{id}/project_name
            # get put
            #/Project/{id}/project_main_grant_type
            # get put post delete
            #/Project/{id}/project_description
            # get put require a description
            #/Project/{id}/grant
            # get put post delete
            #/Project/{id}/university_id
            # get put post delete
            #/Project/{id}/private
            # get put
  
  
  
      ######################################
      ################Posts#################
      ######################################
      #/Post
      # get put post delete
      #/Post/{id}
      # get put delete
      #/Post/{id}/tags
      # get put post delete
      #/Post/{id}/tags/{user_id}
      # get put post delete
      #/Post/{id}/keys
      # get put post delete, either formBody or urlQuery
      #/Post/{id}/keys/{keyword}
      # post delete, get and put don't make sense here since we clearly already know the keyword
      #/Post/{id}/title
      #get put
      #/Post/{id}/text
      #get put post delete
      #/Post/{id}/author
      #get delete
      #/Post/{id}/private
      #get put
  
      #searches
  
      #/Posts/author/{user_id}
      #get
      #/Posts/tags/{user_id}
      #get
      #/Posts/keys/{keyword}
      #get
      #/Posts/keys
      #get (multiple keywords, either formData or url query)
  
      #/Posts/created
      #get, use formdata so we can just pass json I think
      #Posts/modified
      #get, use formdata so we can just pass json I think
  
  
  /Projects:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Gets `Project` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: getProjects
      produces:
        - application/json
      consumes:
        - application/json
      # This is array of GET operation parameters:
      parameters:
        -
          name: size
          in: formData
          description: Max size of array to return
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: Location in pagination
          required: true
          type: number
          format: int32
        -
          name: project_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific project
        -
          name: created_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of project creation
        -
          name: updated_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of project update
        -
          name: project_name
          in: formData
          required: false
          type: string
          description: Project's name
        -
          name: project_main_grant_type
          in: formData
          required: false
          type: string
          description: Project's grant type
        -
          name: project_description
          in: formData
          required: false
          type: string
          description: Description of project
        -
          name: project_creator_id
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of project creator ids
        -
          name: project_collaborators_id
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of project collaborator ids
        -
          name: project_keywords
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of project keywords
        -
          name: project_urls
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of project URLs
        -
          name: grant_id
          in: formData
          required: false
          type: string
          description: Grant ID
        -
          name: university_id
          in: formData
          required: false
          type: string
          description: ID of university hosting research
        -
          name: grant_facilitator
          in: formData
          required: false
          type: string
          description: Name of individual fascilitating grant funding
        -
          name: project_file
          in: formData
          required: false
          type: array
          items:
            type: string
          description: files for grant
        -
          name: reviews
          in: formData
          required: false
          type: array
          items:
            type: string
          description: reviews
        -
          name: posts
          in: formData
          required: false
          type: array
          items:
            type: string
          description: posts related to project
        -
          name: is_project_private
          in: formData
          required: false
          type: boolean
          description: is project private?
      tags:
        - Projects
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: An array of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  
  
  
      ######################################
      ##############Definitions#############
      ######################################
  /Projects/uni/{university_id}:
    get:
      description: |
        Retrieve `Project` objects at a particular `University`
      operationId: getProjectsByUniversityId
      produces:
        - application/json
      parameters:
        -
          name: university_id
          in: path
          description: ID of 'User' to fetch
          required: true
          type: string
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Projects/creator/{user_id}:
    get:
      description: |
        Retrieve `Project` objects by a particular creator `User`
      operationId: getProjectsByCreatorId
      produces:
        - application/json
      parameters:
        -
          name: user_id
          in: path
          description: ID of 'User' to fetch
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Projects/collaborator/{user_id}:
    get:
      description: |
        Retrieve `Project` objects by a particular collaborator `User`
      operationId: getProjectsByCollaboratorId
      produces:
        - application/json
      parameters:
        -
          name: user_id
          in: path
          description: ID of 'User' to fetch
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            #/Projects/creator/{user_id}
            # get
            #/Projects/collaborator/{user_id}
            # get
            #/Projects/keywords/
            # get, takes array in formBody? or in url query?
            #/Projects/keywords/{keyword}
            # post delete
            #/Projects/urls/
            # get, take in formbody
            #/Projects/created
            #get use formdata ?
            #/Projects/modified
            #get use formdata
  /Projects/grant/{grant_id}:
    get:
      description: |
        Retrieve `Project` objects associated with a particular `Grant`
      operationId: getProjectsByGrantId
      produces:
        - application/json
      parameters:
        -
          name: grant_id
          in: path
          description: ID of 'User' to fetch
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            #/Projects/creator/{user_id}
            # get
            #/Projects/collaborator/{user_id}
            # get
            #/Projects/keywords/
            # get, takes array in formBody? or in url query?
            #/Projects/keywords/{keyword}
            # post delete
            #/Projects/urls/
            # get, take in formbody
            #/Projects/created
            #get use formdata ?
            #/Projects/modified
            #get use formdata
  /Projects/created_date:
    get:
      description: |
        Retrieve `Project` objects created on or later than given date
      operationId: getProjectsByCreatedDateForm
      produces:
        - application/json
      parameters:
        -
          name: created_date
          in: formData
          description: date of creation
          required: true
          type: string
          format: date-time-time
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Projects/created_date/{created_date}:
    get:
      description: |
        Retrieve `Project` objects created on or later than given date
      operationId: getProjectsByCreatedDate
      produces:
        - application/json
      parameters:
        -
          name: created_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Projects/modified_date:
    get:
      description: |
        Retrieve `Project` objects modified on or later than given date
      operationId: getProjectsByModifiedDateForm
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: formData
          description: date modified
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Projects/modified_date/{modified_date}:
    get:
      description: |
        Retrieve `Project` objects modified on or later than given date
      operationId: getProjectsByModifiedDate
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: path
          description: date modified
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
              #/Projects/creator/{user_id}
              # get
              #/Projects/collaborator/{user_id}
              # get
              #/Projects/keywords/
              # get, takes array in formBody? or in url query?
              #/Projects/keywords/{keyword}
              # post delete
              #/Projects/urls/
              # get, take in formbody
              #/Projects/created
              #get use formdata ?
              #/Projects/modified
              #get use formdata
  
  /Project:
    post:
      description: |
        Creates `Project` objects. **project_name**, **project_description**,
        **project_creator_id**, and **is_project_private** are required,
        all others optional.
      operationId: createProject
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      -
        name: project_name
        in: formData
        required: true
        type: string
        description: Project's name
      -
        name: project_main_grant_type
        in: formData
        required: false
        type: string
        description: Project's grant type
      -
        name: project_description
        in: formData
        required: true
        type: string
        description: Description of project
      -
        name: project_creator_id
        in: formData
        required: true
        type: array
        items:
          type: string
        description: array of project creator ids
      -
        name: project_collaborators_id
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project collaborator ids
      -
        name: project_keywords
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project keywords
      -
        name: project_urls
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project URLs
      -
        name: grant_id
        in: formData
        required: false
        type: string
        description: Grant ID
      -
        name: university_id
        in: formData
        required: false
        type: string
        description: ID of university hosting research
      -
        name: grant_facilitator
        in: formData
        required: false
        type: string
        description: Name of individual fascilitating grant funding
      -
        name: project_file
        in: formData
        required: false
        type: array
        items:
          type: string
        description: files for grant
      -
        name: reviews
        in: formData
        required: false
        type: array
        items:
          type: string
        description: reviews
      -
        name: posts
        in: formData
        required: false
        type: array
        items:
          type: string
        description: posts related to project
      -
        name: is_project_private
        in: formData
        required: true
        type: boolean
        description: is project private?
      tags:
        - User
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the created user
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    #should only modify users using the user/{id} route to make sure we don't
    # accidentally nike the wrong thing
  /Project/{id}:
    put:
      description: |
        Updates a `Project` object. All fields other than `id` optional.
      operationId: updateProject
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: project id
      -
        name: project_name
        in: formData
        required: false
        type: string
        description: Project's name
      -
        name: project_main_grant_type
        in: formData
        required: false
        type: string
        description: Project's grant type
      -
        name: project_description
        in: formData
        required: false
        type: string
        description: Description of project
      -
        name: project_creator_id
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project creator ids
      -
        name: project_collaborators_id
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project collaborator ids
      -
        name: project_keywords
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project keywords
      -
        name: project_urls
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project URLs
      -
        name: grant_id
        in: formData
        required: false
        type: string
        description: Grant ID
      -
        name: university_id
        in: formData
        required: false
        type: string
        description: ID of university hosting research
      -
        name: grant_facilitator
        in: formData
        required: false
        type: string
        description: Name of individual fascilitating grant funding
      -
        name: project_file
        in: formData
        required: false
        type: array
        items:
          type: string
        description: files for grant
      -
        name: reviews
        in: formData
        required: false
        type: array
        items:
          type: string
        description: reviews
      -
        name: posts
        in: formData
        required: false
        type: array
        items:
          type: string
        description: posts related to project
      -
        name: is_project_private
        in: formData
        required: false
        type: boolean
        description: is project private?
      tags:
        - User
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the updatee `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete a 'Project' by their id.
      operationId: deleteProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: the `id` of the `Project` to delete
          required: true
          type: string
      responses:
        '200':
          description: The `id` of the deleted `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      description: |
        Retrieve a 'Project' by their id.
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: the `id` of the `Project` to delete
          required: true
          type: string
      responses:
        '200':
          description: The `id` of the deleted `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/creators:
    get:
      description: |
        Get creators of a `Project`.
      operationId: getAllProjectCreators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `creators` associated with the `Project`
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Set creators of a `Project`.
      operationId: setAllProjectCreators
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: creators
          in: formData
          description: The `ids` of the creators
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add to creators of a `Project`.
      operationId: addProjectCreators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: creators
          in: formData
          description: The `ids` of the creators
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove all 'project_creators' from a `Project`.
      operationId: deleteProjectCreators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/creators/{user_id}:
    post:
      description: |
        Set creator of a `Project`.
      operationId: setProjectCreator
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `id` of the creator
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add to creators of a `Project`.
      operationId: addProjectCreator
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `ids` of the creators
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove a 'project_creator' from a `Project`.
      operationId: deleteProjectCreator
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `ids` of the creators
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/collaborators:
    get:
      description: |
        Get collaborators of a `Project`.
      operationId: getAllProjectCollaborators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `collaborators` associated with the `Project`
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Set creators of a `Project`.
      operationId: setAllProjectCollaborators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: collaborators
          in: formData
          description: The `ids` of the ollaborators
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add to collaborators of a `Project`.
      operationId: addProjectCollaborators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: collaborators
          in: formData
          description: The `ids` of the collaborators
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove all 'project_collaborators' from a `Project`.
      operationId: deleteProjectCollaborators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/collaborators/{user_id}:
    post:
      description: |
        Set collaborators of a `Project`.
      operationId: setProjectCollaborators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `id` of the collaborator
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add to collaborator of a `Project`.
      operationId: addProjectCollaborator
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `ids` of the collaborator
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove a 'project_collaborator' from a `Project`.
      operationId: deleteProjectCollaborator
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `ids` of the collaborator
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/urls:
    get:
      description: |
        Get urls of a `Project`.
      operationId: getAllProjectUrls
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `urls` associated with the `Project`
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Set urls of a `Project`.
      operationId: setAllProjectUrls
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: urls
          in: formData
          description: The `urls` of the project
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add to urls of a `Project`.
      operationId: addProjectUrls
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: urls
          in: formData
          description: The `urls` of the `Project``
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove all 'urls' from a `Project`.
      operationId: deleteProjectUrls
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/keys:
    get:
      description: |
        Get keywords of a `Project`.
      operationId: getAllProjectKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `keywords` associated with the `Project`
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Set keywords of a `Project`.
      operationId: setAllProjectKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: keywords
          in: formData
          description: The `keywords` of the `Project``
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add to keywords of a `Project`.
      operationId: addProjectKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: keywords
          in: formData
          description: The `ids` of the collaborators
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove all 'keywords' from a `Project`.
      operationId: deleteProjectKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/keys/{keyword}:
    post:
      description: |
        Set keyword of a `Project`.
      operationId: setProjectKeyword
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The `keyword`
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add to keyword of a `Project`.
      operationId: addProjectKeyword
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The keyword
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove a 'keyword' from a `Project`.
      operationId: deleteProjectKeyword
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The keyword
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/files:
    get:
      description: |
        Get files of a `Project`.
      operationId: getAllProjectFiles
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `files` associated with the `Project`
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Set files of a `Project`.
      operationId: setAllProjectFiles
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: files
          in: formData
          description: The `files` of the project
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add to files of a `Project`.
      operationId: addProjectFiles
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: urls
          in: formData
          description: The `files` of the `Project``
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove all 'files' from a `Project`.
      operationId: deleteProjectFiles
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/reviews:
    get:
      description: |
        Get reviews of a `Project`.
      operationId: getAllProjectReviews
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `reviews` associated with the `Project`
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Set reviews of a `Project`.
      operationId: setAllProjectReviews
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: reviews
          in: formData
          description: The `ids` of the reviews
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add to reviews of a `Project`.
      operationId: addProjectReviews
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: reviews
          in: formData
          description: The `ids` of the reviews
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove all 'reviews' from a `Project`.
      operationId: deleteProjectReviews
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/reviews/{review_id}:
    get:
      description: |
        Get reviews of a `Project`.
      operationId: getProjectReview
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `id` of the review
          required: true
          type: string
      responses:
        '200':
          description: The review
          schema:
            $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add review to a `Project`.
      operationId: addProjectReview
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `id` of the review
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove a 'review' from a `Project`.
      operationId: deleteProjectReview
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `ids` of the review
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/posts:
    get:
      description: |
        Get posts of a `Project`.
      operationId: getAllProjectPosts
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `reviews` associated with the `Project`
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Set posts of a `Project`.
      operationId: setAllProjectPosts
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: posts
          in: formData
          description: The `ids` of the posts
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add to posts of a `Project`.
      operationId: addProjectPosts
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: reviews
          in: formData
          description: The `ids` of the posts
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove all 'posts' from a `Project`.
      operationId: deleteProjectPosts
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/posts/{post_id}:
    get:
      description: |
        Get reviews of a `Project`.
      operationId: getProjectPost
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: post_id
          in: path
          description: The `id` of the post
          required: true
          type: string
      responses:
        '200':
          description: The post
          schema:
            $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Add post to a `Project`.
      operationId: addProjectPost
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: post_id
          in: path
          description: The `id` of the post
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Remove a 'post' from a `Project`.
      operationId: deleteProjectPost
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: post_id
          in: path
          description: The `ids` of the post
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/project_name:
    get:
      description: |
        Retrieve project_name associated with a `Project`.
      operationId: getProjectNameById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The project_name
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete project_name from a project
      operationId: deleteUserProjectName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_name` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/name/{project_name}:
    post:
      description: |
        Add project_name to a `Project`.
      operationId: addProjectName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_name
          in: path
          description: The project_name
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Modify project_name of a `Project`.
      operationId: modifyProjectName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_name
          in: path
          description: The project_name
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/grant_type:
    get:
      description: |
        Retrieve project_main_grant_type associated with a `Project`.
      operationId: getProjectGrantTypeById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The project_main_grant_type
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete project_main_grant_type from a project
      operationId: deleteProjectGrantType
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_main_grant_type` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/grant_type/{project_main_grant_type}:
    post:
      description: |
        Add project_name to a `Project`.
      operationId: setProjectGrantType
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_main_grant_type
          in: path
          description: The project_main_grant_type
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Modify project_name of a `Project`.
      operationId: modifyProjectGrantType
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_main_grant_type
          in: path
          description: The project_main_grant_type
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/description:
    get:
      description: |
        Retrieve project_description associated with a `Project`.
      operationId: getProjectDescriptionById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The project_description
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete project_description from a project
      operationId: deleteProjectDescription
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_description` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/description/{project_description}:
    post:
      description: |
        Add project_description to a `Project`.
      operationId: setProjectDescription
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_description
          in: path
          description: The project_description
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Modify project_description of a `Project`.
      operationId: modifyProjectDescription
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_description
          in: path
          description: The project_description
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/grant:
    get:
      description: |
        Retrieve grant associated with a `Project`.
      operationId: getProjectGrantById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The grant
          schema:
            $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete grant from a project
      operationId: deleteProjectGrant
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `grant` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/grant/{grant_id}:
    post:
      description: |
        Add grant to a `Project`.
      operationId: setProjectGrant
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: grant_id
          in: path
          description: The grant_id
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Modify grant of a `Project`.
      operationId: modifyProjectGrant
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: grant_id
          in: path
          description: The grant_id
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/uni:
    get:
      description: |
        Retrieve universities associated with a `Project`.
      operationId: getUniversitiesById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The grant
          schema:
            $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: |
        Delete all universities from a project
      operationId: deleteProjecUniversities
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/uni/{university_id}:
    post:
      description: |
        Set university_id to a `Project`.
      operationId: setProjectUniversity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The university_id
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Modify university_id of a `Project`.
      operationId: modifyProjectUniversity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The university_id
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/private:
    get:
      description: |
        Retrieve is_private from a  `Project`.
      operationId: isProjectPrivate
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Set is_private from a  `Project`.
      operationId: setIsProjectPrivate
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: is_private
          in: formData
          description: is project private?
          required: true
          type: boolean
      responses:
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:
  User:
    type: object
    properties:
      user_id:
        type: string
        description: Unique identifier representing a specific user
      first_name:
        type: string
        description: User's first name.
      last_name:
        type: string
        description: User's last name
      is_creator:
        type: boolean
        description: Is user a project creator? #(not mutually exclusive with is_collaborator)
      is_collaborator:
        type: boolean
        description: Is user a project collaborator? #(not mutually exclusive with is_creator)
      profile_images:
        type: array
        items:
          type: string
        description: Array of file system paths to profile images
      created_date:
        type: string
        format: date-time
        description: datetime stamp of user creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of user update
      geolocation:
        type: array
        items:
          type: number
          format: double
        description: Tuple representing latitude/longitude of user
      city:
        type: string
        description: City of user location
      state:
        type: string
        description: State of user location
      #recent_collaborators:
      #  type: array
      #  items:
      #    $ref: '#/definitions/User'
      #  description: array of recent collaborators
      recent_collaborators_id:
        type: array
        items:
          type: string
        description: array of user_ids of recent collaborators
      university_ids:
        type: array
        items:
          type: string
        description: array of universities the user is associated with
      #projects:
      #  type: array
      #  items:
      #    $ref: '#/definitions/Project'
      #  description: array of user projects
      project_ids:
        type: array
        items:
          type: string
        description: array of user projects
      keywords:
        type: array
        items:
          type: string
        description: array of keywords associated with the user
      #reviews:
      #  type: array
      #  items:
      #    $ref: '#/definitions/Review'
      #  description: array of reviews
      review_ids:
        type: array
        items:
          type: string
        description: array of review ids
      is_user_private:
        type: boolean
        description:  is user profile public or private?
  Users:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/User'
  Project:
    type: object
    properties:
      project_id:
        type: string
        description: Unique identifier representing a specific project
      created_date:
        type: string
        format: date-time
        description: datetime stamp of project creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of project update
      project_name:
        type: string
        description: Project's name
      project_main_grant_type:
        type: string
        description: Project's grant type
      project_description:
        type: string
        description: Description of project
      project_creator_id:
        type: array
        items:
          type: string
        description: array of project creator ids
      project_collaborators_id:
        type: array
        items:
          type: string
        description: array of project collaborator ids
      project_keywords:
        type: array
        items:
          type: string
        description: array of project keywords
      project_urls:
        type: array
        items:
          type: string
        description: array of project URLs
      grant_id:
        type: string
        description: Grant ID
      university_id:
        type: string
        description: ID of university hosting research
      grant_facilitator:
        type: string
        description: Name of individual fascilitating grant funding
      project_file:
        type: array
        items:
          type: string
        description: files for grant
      reviews:
        type: array
        items:
          type: string
        description: reviews
      posts:
        type: array
        items:
          type: string
        description: posts related to project
      is_project_private:
        type: boolean
        description: is project private?
  Projects:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Project'
  Post:
    type: object
    properties:
      post_id:
        type: string
        description: id of post
      created_date:
        type: string
        format: date-time
        description: datetime stamp of post creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of post update
      post_title:
        type: string
        description: title of post
      post_text:
        type: string
        description: text of post
      post_keywords:
        type: array
        items:
          type: string
        description: keywords for post
      post_author:
        $ref: '#/definitions/User'
        description: author of post
      post_author_id:
        type: string
        description: id of author of post
      post_tags:
        type: array
        items:
          $ref: '#/definitions/User'
        description: tagged users
      post_tags_id:
        type: array
        items:
          type: string
        description: tagged user ids
      is_post_private:
        type: boolean
        description: is post private?
  Posts:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Post'
  Grant:
    type: object
    properties:
      grant_id:
        type: string
        description: id of grant
      created_date:
        type: string
        format: date-time
        description: datetime stamp of grant creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of grant update
      grant_url:
        type: array
        items:
          type: string
        description: URL of grants
      grant_description:
        type: string
        description: Grant description
      grant_amount:
        type: number
        format: double
        description: Amount of grant
  Grants:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Grant'
  Review:
    type: object
    properties:
      review_id:
        type: string
        description: id of review
      created_date:
        type: string
        format: date-time
        description: datetime stamp of review creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of review update
      review_body:
        type: string
        description: text body of review
      reviewer:
        $ref: '#/definitions/User'
        description: reviewer user
      reviewer_id:
        type: string
        description: reviewer user id
      rating:
        type: integer
        format: int32
        description: rating, must be 1-5
  Reviews:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Review'
 #so for skills
 #basically we want to associate those with the user
 #BUT
 #we want to be able to get a master list of skills too and order them popularity
 #so group them and sort by count maybe? kinda like stackoverflow seems to to with tags?
  Skill:
    type: object
    properties:
      review_id:
        type: string
        description: id of skill
      created_date:
        type: string
        format: date-time
        description: datetime stamp of skill creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of skill update
      description:
        type: string
        description: text body of skill
      #endorsements:
      #  type: array
      #  items:
      #    $ref: '#/definitions/User'
      #  description: users who have endorsed the user for this skill
      endorsements_id:
        type: array
        items:
          type: string
        description: ids of users who have endorsed the user for this skill
  Skills:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Skill'
  University:
    type: object
    properties:
      uni_id:
        type: string
        description: id of `University`
      created_date:
        type: string
        format: date-time
        description: datetime stamp of `University` creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of `University` update
      university_name:
        type: string
        description: text body of `University`
      profile_images:
        type: array
        items:
          type: string
        description: Array of file system paths to profile images
      geolocation:
        type: array
        items:
          type: number
          format: double
        description: Tuple representing latitude/longitude of user
      city:
        type: string
        description: City of `University` location
      state:
        type: string
        description: State of `University` location
      project_ids:
        type: array
        items:
          type: string
        description: ids of `Project`s based at this `University`
  Universities:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/University'
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
