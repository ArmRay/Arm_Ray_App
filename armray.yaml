# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# document metadata
info:
  version: "0.0.1"
  title: ArmRay API
  description: Definition of ArmRay backend API
#This will contain the hostname
#host: armray.com
schemes:
  - http
  #once we have auth/certs going it should change to
  #- https
# will be prefixed to all paths
#placeholder in case we need this
basePath: /armray/api/0.1/rest

#I'm assumping we'll be returning json for all the calls
produces:
  - application/json
consumes:
  - application/json
#####
##So do we want endpoints for every property on an object? i.e. for project, should urls, leywords, creators, collabs, univ, etc., all have their own endpoints?
####
######################################
#################Paths################
######################################
#and now the actual api paths
paths:
  ##/Users routes
  ######################################
  #################Users################
  ######################################
  #/Users
  # get
  #Users/uni/{university_id}
  # get
  #Users/uni/{project
  # get
  #/User
  # post
  #/User/{id}
  # put, delete, get
  #/User/{id}/uni/{uniuversity_id}
  # get, post, delete
  #/User/{id}/project/{project_id}
  # get, post, delete
  #User/{id}/review/{project_id}
  #/User/{id}/review/{project_id}
  #
  #./review and
  # get only. other actions can be done just as easily specifying the idea of the already instantiated object.
  #/User/{id}/project/{review_id}
  # get, post, delete
  #/User/{id}/colaborators/{user_id}
  # get, post, delete

  #/User/{id}/universities
  # get, put, post, delete

  #/User/{id}/universities/{uni_id}
  # get, post, delete

  #/User/{id}/images/
  #get put post delete

  #/User/{id}/keys
  # get put post delete, either formBody or urlQuery
  #/User/{id}/keys/{keyword}
  # pst delete, get and put don't make sense here since we clearly already know the keyword


  #other fields
  #/User/{id}/first_name
  # get put
  #/User/{id}/last_name
  # get put
  #/User/{id}/collaborator
  # get put
  #/User/{id}/creator
  # get put
  #/User/{id}/city
  # get put
  #/User/{id}/state
  # get put
  #/User/{id}/created
  # get
  #/User/{id}/modified
  # get

  #/Users/created
  #get
  #/Users/modified
  #get
  #/Users/keys/
  # get: a keyword search
  #something with images and keywords maybe

#users search routes
  /Users:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Gets `User` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: getUsers
      produces:
        - application/json
      consumes:
        - application/json
      # This is array of GET operation parameters:
      parameters:
        -
          name: size
          in: formData
          description: Max size of array to return
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: Location in pagination
          required: true
          type: number
          format: int32
        -
          name: first_name
          in: formData
          description: first name of user
          required: false
          type: string
        -
          name: last_name
          in: formData
          description: last name of user
          required: false
          type: string
        -
          name: is_collaborator
          in: formData
          description: is user a collaborator?
          required: false
          type: boolean
        -
          name: is_creator
          in: formData
          description: is user a creator?
          required: false
          type: boolean
        -
          name: city
          in: formData
          description: city location of user
          required: false
          type: string
        -
          name: state
          in: formData
          description: state location of user
          required: false
          type: string
        -
          name: university_ids
          in: formData
          description: universities a user is associated with
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        -
          name: project_id
          in: formData
          description: project_id the user is associated with
          required: false
          type: string
        -
          name: created_date
          in: formData
          description: date the user was created
          required: false
          type: string
        -
          name: modified_date
          in: formData
          description: date the user was modified
          required: false
          type: string
        -
          name: keywords
          in: formData
          description: keyword
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: skills
          in: formData
          description: skills to search for
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      tags:
        - User
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Users/uni/{university_id}:
      get:
        tags:
        - User
        - University
        description: |
          Retrieve `User` objects at a particular `University`
        operationId: getUsersByUniversityId
        produces:
          - application/json
        parameters:
          -
            name: university_id
            in: path
            description: ID of 'User' to fetch
            required: true
            type: string
          -
            name: max
            in: formData
            description: max num of 'User' to fetch
            required: true
            type: number
            format: int32
          -
            name: page
            in: formData
            description: page in pagination
            required: true
            type: number
            format: int32
        responses:
          '200':
            description: users response
            schema:
              type: array
              items:
                $ref: '#/definitions/User'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'  
  /Users/projects/{project_id}:
    get:
      tags:
        - User
        - Project
      description: |
        Retrieve `User` objects on a particular `Project`
      operationId: getUsersByProjectId
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: project_id
          in: path
          description: ID of 'Project' to fetch
          required: true
          type: string
        -
          name: max
          in: formData
          description: max num of 'User' to fetch
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: page in pagination
          required: true
          type: number
          format: int32
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Users/created/{created_date}:
      get:
        tags:
        - User
        description: |
          Retrieve `User` objects created on or after the given date
        operationId: getUsersByCreatedDate
        produces:
          - application/json
        parameters:
          -
            name: created_date
            in: path
            description: Date that `User` object was created
            required: true
            type: string
        responses:
          '200':
            description: users response
            schema:
              type: array
              items:
                $ref: '#/definitions/User'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'            
  /Users/created:
      get:
        tags:
        - User
        description: |
          Retrieve `User` objects created on or after the given date2
        operationId: getUsersByCreatedDateForm
        produces:
          - application/json
        consumes:
          - application/json
        parameters:
          -
            name: created_date
            in: formData
            description: Date that `User` object was created
            required: true
            type: string
            format: date-time
        responses:
          '200':
            description: users response
            schema:
              type: array
              items:
                $ref: '#/definitions/User'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  /Users/modified/{modified_date}:
    get:
      tags:
        - User
      description: |
        Retrieve `User` objects created on or after the given date
      operationId: getUsersByModifiedDate
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: path
          description: Date that `User` object was modified
          required: true
          type: string
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Users/modified_date:
    get:
      tags:
        - User
      description: |
        Retrieve `User` objects created on or after the given date
      operationId: getUsersByModifiedDateForm
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: formData
          description: Date that `User` object was modified
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'              
  /Users/keys:
    get:
      tags:
        - User
      description: |
        Retrieve `User` objects based on keywords
      operationId: getUsersByKeywords
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: keywords
          in: formData
          description: Keywords when searching for user
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Users/skills:
    get:
      tags:
        - User
      description: |
        Retrieve `User` objects based on skills
      operationId: getUsersBySkills
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: skills
          in: formData
          description: Skills when searching for user
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  ##/User routes
  /User:
    post:
      description: |
        Creates `User` objects. `University` and `Project` are optional (user may not yet have affiliations)
        `Keywords` also optional. All other fields required.
      operationId: createUser
      produces:
        - application/json
      consumes:
        - application/json
  
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: first_name
          in: formData
          description: first name of `User`
          required: true
          type: string
        -
          name: last_name
          in: formData
          description: last name of `User`
          required: true
          type: string
        -
          name: is_collaborator
          in: formData
          description: is `User` a collaborator?
          required: true
          type: boolean
        -
          name: is_creator
          in: formData
          description: is `User` a creator?
          required: true
          type: boolean
        -
          name: city
          in: formData
          description: city location of `User`
          required: true
          type: string
        -
          name: state
          in: formData
          description: state location of `User`
          required: true
          type: string
        -
          name: university_ids
          in: formData
          description: university a `User` is associated with
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        -
          name: project_id
          in: formData
          description: project_id the `User` is associated with
          required: false
          type: string
        -
          name: keywords
          in: formData
          description: keyword
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      tags:
        - User
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: The `id` of the created user
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}:
    put:
      description: |
        Updates a `User` object. All fields other than `id` optional.
      operationId: updateUser
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: ID of `User` to fetch
          required: true
          type: string
        -
          name: first_name
          in: formData
          description: first name of `User`
          required: false
          type: string
        -
          name: last_name
          in: formData
          description: last name of `User`
          required: false
          type: string
        -
          name: is_collaborator
          in: formData
          description: is `User` a collaborator?
          required: false
          type: boolean
        -
          name: is_creator
          in: formData
          description: is `User` a creator?
          required: false
          type: boolean
        -
          name: city
          in: formData
          description: city location of `User`
          required: false
          type: string
        -
          name: state
          in: formData
          description: state location of `User`
          required: false
          type: string
        -
          name: university
          in: formData
          description: university a `User` is associated with
          required: false
          type: string
        -
          name: project_id
          in: formData
          description: project_id the `User` is associated with
          required: false
          type: string
        -
          name: keywords
          in: formData
          description: keyword
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
      tags:
        - User
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: The `id` of the updatee `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
      description: |
        Delete a 'User' by their id.
      operationId: deleteUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: the `id` of the `User` to delete
          required: true
          type: string
      responses:
        '200':
          description: The `id` of the deleted `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - User
      description: |
        Retrieve a 'User' by their id.
      operationId: getUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: the `id` of the `User` to delete
          required: true
          type: string
      responses:
        '200':
          description: The `id` of the deleted `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /User/{id}/uni/{university_id}:
    get:
      tags:
        - User
        - University
      description: |
        Is 'University' associated with a `User`?
      operationId: isUniversityOnUser
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The `university_id` of the `University` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `University` associated with the `User`
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - User
        - University
      description: |
        Add a 'University' to a `User`.
      operationId: settUserUniversityById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The `university_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `university_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
        - University
      description: |
        Remove a 'University' fromo a `User`.
      operationId: deleteUserUniversityById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The `university_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #not going to add a PUT to modify a project, that should be done directly on the Project paths
      #redundant paths are bad            
  /User/{id}/project:
    get:
      tags:
        - User
        - Project
      description: |
        Retrieve all 'Project' associated with a `User`.
      operationId: getAllUserProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `Project` associated with the `User`
          schema:
            $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
        - Project
      description: |
        Remove all 'Project' ojects from a `User`.
      operationId: deleteAllUserProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/project/{project_id}:
    get:
      tags:
        - User
        - Project
      description: |
        Is 'Project' associated with a `User`?
      operationId: isUserOnProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: project_id
          in: path
          description: The `project_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - User
        - Project
      description: |
        Add a 'Project' to a `User`.
      operationId: settUserProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: project_id
          in: path
          description: The `project_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
        - Project
      description: |
        Remove a 'Project' from a `User`.
      operationId: deleteUserProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: project_id
          in: path
          description: The `project_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/review:
    get:
      tags:
        - User
        - Review
      description: |
        Retrieve all 'Review' associated with a `User`.
      operationId: getAllUserReviewById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of reviews
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
        - Review
      description: |
        Remove all 'Review' ojects from a `User`.
      operationId: deleteAllUserReviewById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/review/{review_id}:
    get:
      tags:
        - User
        - Review
      description: |
        Is a 'Review' associated with a `User`??
      operationId: isReviewOnUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `review_id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - User
        - Review
      description: |
        Add a 'Review' to a `User`.
      operationId: setUserReviewById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `review_id` of the `Review` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `review_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
        - Review
      description: |
        Remove a 'Review' from a `User`.
      operationId: deleteUserReviewById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `review_id` of the `Review` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `review_id` associated with the `Review`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/images:
    get:
      tags:
        - User
        - TODO-create-images-object
      description: |
        Retrieve all images associated with a `User`.
      operationId: getAllUserImages
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The image url associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    #I don't think put makes sense since we'd just have to pull the array, modify it, and send it back anyway
    post:
      tags:
        - User
      description: |
        Add images to a `User`.
      operationId: setUserImages
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: images
          in: formData
          description: The paths of the images
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
      description: |
        Remove an image, or multiple images, from a `User`.
      operationId: deleteImagesFromUserById
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: images
          in: formData
          description: The paths of the images
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/keys:
    get:
      tags:
        - User
      description: |
        Retrieve all keywords associated with a `User`.
      operationId: getAllUserKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of keywords
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    #I don't think put makes sense since we'd just have to pull the array, modify it, and send it back anyway
    post:
      tags:
        - User
      description: |
        Add keywords to a `User`.
      operationId: setUserKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: keywords
          in: formData
          description: The keywords
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
      description: |
        Delete keywords from a user
      operationId: deleteKeywordsFromUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/keys/{keyword}:
    get:
      tags:
        - User
      description: |
        Check if a keyword is on a `User`.
      operationId: isUserHaveKeyword
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The keyword
          required: true
          type: string
      responses:
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - User
      description: |
        Add a keyword to a `User`.
      operationId: setUserKeyword
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The keyword
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
      description: |
        Delete keyword from a user
      operationId: deleteKeywordFromUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The keyword
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/skills/{skill_id}:
    get:
      tags:
        - User
        - Skill
      description: |
        Check if skill is associated with a `User`.
      operationId: getIsSkillOnUser
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: skill_id
          in: path
          description: The `id` of the `Skill` to retrieve
          required: true
          type: string          
      responses:
        '200':
          description: An array of UserSkills ids 
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    #I don't think put makes sense since we'd just have to pull the array, modify it, and send it back anyway
    post:
      tags:
        - User
        - Skill
      description: |
        Set skill on a `User`.
      operationId: setUserSkill
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: skill_id
          in: path
          description: The skills is
          required: true
          type: string
          collectionFormat: csv
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    #I don't think put makes sense since we'd just have to pull the array, modify it, and send it back anyway
    put:
      tags:
        - User
        - Skill
      description: |
        Add skill to a `User`.
      operationId: addUserSkill
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: skill_id
          in: path
          description: The skills id
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
    delete:
      tags:
        - User
        - Skill
      description: |
        Delete skill from a user
      operationId: deleteSkillFromUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: skill_id
          in: path
          description: The `id` of the `Skill` to delete
          required: true
          type: string

      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/skills:
    get:
      tags:
        - User
        - Skill
      description: |
        Retrieve all skills associated with a `User`.
      operationId: getAllUserSkills
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of UserSkills ids 
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    #I don't think put makes sense since we'd just have to pull the array, modify it, and send it back anyway
    post:
      tags:
        - User
        - Skill
      description: |
        Set skills on a `User`.
      operationId: setUserSkills
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: keywords
          in: formData
          description: The skills ids
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    #I don't think put makes sense since we'd just have to pull the array, modify it, and send it back anyway
    put:
      tags:
        - User
        - Skill
      description: |
        Add skills to a `User`.
      operationId: addUserSkills
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: keywords
          in: formData
          description: The skills ids
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
    delete:
      tags:
        - User
        - Skill
      description: |
        Delete skills from a user
      operationId: deleteSkillsFromUserById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/first_name:
    get:
      tags:
        - User
      description: |
        Retrieve first name associated with a `User`.
      operationId: getFirstNameById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of keywords
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
        - Review
      description: |
        Delete first_name from a user
      operationId: deleteUserFirstName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/first_name/{first_name}:
    get:
      tags:
        - User
      description: |
        Check if first name is on `User`
      operationId: isUserFirstName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: first_name
          in: path
          description: The keywords
          required: true
          type: string
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'  
    post:
      tags:
        - User
      description: |
        Add first name to a `User`.
      operationId: addUserFirstName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: first_name
          in: path
          description: The keywords
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - User
      description: |
        Modify first name of a `User`.
      operationId: modifyUserFirstName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: first_name
          in: path
          description: The keywords
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/last_name:
    get:
      tags:
        - User
      description: |
        Retrieve first name associated with a `User`.
      operationId: getLastNameById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of keywords
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
      description: |
        Delete last_name from a user
      operationId: deleteUserLastName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/last_name/{last_name}:
    get:
      tags:
        - User
      description: |
        Check if last name is on `User`.
      operationId: isUserLastName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: last_name
          in: path
          description: The keywords
          required: true
          type: string
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - User
      description: |
        Add last name to a `User`.
      operationId: addUserLastName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: last_name
          in: path
          description: The keywords
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - User
      description: |
        Modify last name of a `User`.
      operationId: modifyUserLastName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: last_name
          in: path
          description: The keywords
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/collaborator:
    get:
      tags:
        - User
      description: |
        Retrieve if `User` is a collaborator.
      operationId: isCollaboratorById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of keywords
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - User
      description: |
        set if `User` is a collaborator.
      operationId: setIsUserCollaboratorById
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: isCollaborator
          in: formData
          description: Is user a collaborator?
          required: true
          type: boolean
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - User
      description: |
        set if `User` is a collaborator.
      operationId: setIsUserCollaboratorByIdPut
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: isCollaborator
          in: formData
          description: Is user a collaborator?
          required: true
          type: boolean
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/creator:
    get:
      tags:
        - User
      description: |
        Retrieve if `User` is a creator.
      operationId: isCreatorById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: An array of keywords
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - User
      description: |
        set if `User` is a creator.
      operationId: setIsUserCreatorById
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: isCreator
          in: formData
          description: Is user a creator?
          required: true
          type: boolean
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - User
      description: |
        set if `User` is a creator.
      operationId: setIsUserCreatorByIdPut
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: isCollaborator
          in: formData
          description: Is user a creator?
          required: true
          type: boolean
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/city:
    get:
      tags:
        - User
      description: |
        Retrieve city associated with a `User`.
      operationId: getCityNameById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The city
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
      description: |
        Delete city from a user
      operationId: deleteUserCity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/city/{city}:
    get:
      tags:
        - User
      description: |
        Check if city is on `User`.
      operationId: isUserCity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: city
          in: path
          description: The city
          required: true
          type: string
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
    post:
      tags:
        - User
      description: |
        Add city to a `User`.
      operationId: addUserCity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: city
          in: path
          description: The city
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - User
      description: |
        Modify city of a `User`.
      operationId: modifyUserCity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: city
          in: path
          description: The city
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/state:
    get:
      tags:
        - User
      description: |
        Retrieve state associated with a `User`.
      operationId: getStateById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The state
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
      description: |
        Delete state from a user
      operationId: deleteUserState
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `user_id` associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/state/{state}:
    get:
      tags:
        - User
      description: |
        Check if state is on `User`.
      operationId: isUserState
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: state
          in: path
          description: The state
          required: true
          type: string
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error' 
    post:
      tags:
        - User
      description: |
        Add state to a `User`.
      operationId: addUserState
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: state
          in: path
          description: The state
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - User
      description: |
        Modify state of a `User`.
      operationId: modifyUserState
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: state
          in: path
          description: The state
          required: true
          type: string
      responses:
        '200':
          description: The user_id associated with the `User`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/created:
    get:
      tags:
        - User
      description: |
        Retrieve creation date of a `User`.
      operationId: getCreatedDateById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The date
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /User/{id}/modified:
    get:
      tags:
        - User
      description: |
        Retrieve modified date of a `User`.
      operationId: getModifiedDateById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The date
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  
  
      #not going to add a PUT to modify a project, that should be done directly on the Project paths
      #redundant paths are bad
      ######################################
      ###############Projects###############
      ######################################
  
      #Projects searches, basically
      #/Projects
            #/Projects/creator/{user_id}
            # get
            #/Projects/collaborator/{user_id}
            # get
            #/Projects/keywords/
            # get, takes array in formBody? or in url query?
            #/Projects/keywords/{keyword}
            # post delete
            #/Projects/urls/
            # get, take in formbody
            #/Projects/created
            #get use formdata ?
            #/Projects/modified
            #get use formdata
  
            #/Project
            # get, put, post, delete
            #/Project/{id}
            # get, put, delete
            #/Projects/{id}/grant/{grant_type}
            # get post put(?)
            #creators should realy be immutable, and should always exist put only exists to modify in case of a mistake
            #/Project/{id}/creators
            # get put
            #/Project/{id}/creator/{user_id}
            # get put
  
            #/Project/{id}/urls
            # get put, url needs to be in formbody or in url query I guess?
  
            #/Project/collaborators/
            # get put post delete
            #/Project/collaborators/{user_id}
            # get put post delete
  
            #keywords
            #/Project/{id}/keys
            # get put post delete, either formBody or urlQuery
            #/Project/{id}/keys/{keyword}
            # pst delete, get and put don't make sense here since we clearly already know the keyword
            #files
            #/Project/{id}/files
            # get put post delete, should be in formbody or url query
            #reviews
            #/Project/{id}/reviews/{review_id}
            # get put post delete
  
            #posts
            #/Project/{id}/posts/{post_id}
            # get put post delete
  
  
            #other fields
            #/Project/{id}/project_name
            # get put
            #/Project/{id}/project_main_grant_type
            # get put post delete
            #/Project/{id}/project_description
            # get put require a description
            #/Project/{id}/grant
            # get put post delete
            #/Project/{id}/university_id
            # get put post delete
            #/Project/{id}/private
            # get put
  
  
  
      ######################################
      ################Posts#################
      ######################################
      #/Post
      # get put post delete
      #/Post/{id}
      # get put delete
      #/Post/{id}/tags
      # get put post delete
      #/Post/{id}/tags/{user_id}
      # get put post delete
      #/Post/{id}/keys
      # get put post delete, either formBody or urlQuery
      #/Post/{id}/keys/{keyword}
      # post delete, get and put don't make sense here since we clearly already know the keyword
      #/Post/{id}/title
      #get put
      #/Post/{id}/text
      #get put post delete
      #/Post/{id}/author
      #get delete
      #/Post/{id}/private
      #get put
  
      #searches
  
      #/Posts/author/{user_id}
      #get
      #/Posts/tags/{user_id}
      #get
      #/Posts/keys/{keyword}
      #get
      #/Posts/keys
      #get (multiple keywords, either formData or url query)
  
      #/Posts/created
      #get, use formdata so we can just pass json I think
      #Posts/modified
      #get, use formdata so we can just pass json I think
  
  
  /Projects:
    # This is a HTTP operation
    get:
      tags:
        - Project
      # Describe this verb here. Note: you can use markdown
      description: |
        Gets `Project` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: getProjects
      produces:
        - application/json
      consumes:
        - application/json
      # This is array of GET operation parameters:
      parameters:
        -
          name: size
          in: formData
          description: Max size of array to return
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: Location in pagination
          required: true
          type: number
          format: int32
        -
          name: project_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific project
        -
          name: created_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of project creation
        -
          name: updated_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of project update
        -
          name: project_name
          in: formData
          required: false
          type: string
          description: Project's name
        -
          name: project_main_grant_type
          in: formData
          required: false
          type: string
          description: Project's grant type
        -
          name: project_description
          in: formData
          required: false
          type: string
          description: Description of project
        -
          name: project_creator_id
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of project creator ids
        -
          name: project_collaborators_id
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of project collaborator ids
        -
          name: project_keywords
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of project keywords
        -
          name: project_urls
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of project URLs
        -
          name: grant_id
          in: formData
          required: false
          type: string
          description: Grant ID
        -
          name: university_id
          in: formData
          required: false
          type: string
          description: ID of university hosting research
        -
          name: grant_facilitator
          in: formData
          required: false
          type: string
          description: Name of individual fascilitating grant funding
        -
          name: project_file
          in: formData
          required: false
          type: array
          items:
            type: string
          description: files for grant
        -
          name: reviews
          in: formData
          required: false
          type: array
          items:
            type: string
          description: reviews
        -
          name: posts
          in: formData
          required: false
          type: array
          items:
            type: string
          description: posts related to project
        -
          name: is_project_private
          in: formData
          required: false
          type: boolean
          description: is project private?
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: An array of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  
  
  
  
      ######################################
      ##############Definitions#############
      ######################################
  /Projects/uni/{university_id}:
    get:
      tags:
        - Project
        - University
      description: |
        Retrieve `Project` objects at a particular `University`
      operationId: getProjectsByUniversityId
      produces:
        - application/json
      parameters:
        -
          name: university_id
          in: path
          description: ID of 'User' to fetch
          required: true
          type: string
      responses:
        '200':
          description: users response
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Projects/creator/{user_id}:
    get:
      tags:
        - Project
        - User
      description: |
        Retrieve `Project` objects by a particular creator `User`
      operationId: getProjectsByCreatorId
      produces:
        - application/json
      parameters:
        -
          name: user_id
          in: path
          description: ID of 'User' to fetch
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Projects/collaborator/{user_id}:
    get:
      tags:
        - Project
        - User
      description: |
        Retrieve `Project` objects by a particular collaborator `User`
      operationId: getProjectsByCollaboratorId
      produces:
        - application/json
      parameters:
        -
          name: user_id
          in: path
          description: ID of 'User' to fetch
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            #/Projects/creator/{user_id}
            # get
            #/Projects/collaborator/{user_id}
            # get
            #/Projects/keywords/
            # get, takes array in formBody? or in url query?
            #/Projects/keywords/{keyword}
            # post delete
            #/Projects/urls/
            # get, take in formbody
            #/Projects/created
            #get use formdata ?
            #/Projects/modified
            #get use formdata
  /Projects/grant/{grant_id}:
    get:
      tags:
        - Project
        - Grant
      description: |
        Retrieve `Project` objects associated with a particular `Grant`
      operationId: getProjectsByGrantId
      produces:
        - application/json
      parameters:
        -
          name: grant_id
          in: path
          description: ID of 'User' to fetch
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
            #/Projects/creator/{user_id}
            # get
            #/Projects/collaborator/{user_id}
            # get
            #/Projects/keywords/
            # get, takes array in formBody? or in url query?
            #/Projects/keywords/{keyword}
            # post delete
            #/Projects/urls/
            # get, take in formbody
            #/Projects/created
            #get use formdata ?
            #/Projects/modified
            #get use formdata
  /Projects/created_date:
    get:
      tags:
        - Project
      description: |
        Retrieve `Project` objects created on or later than given date
      operationId: getProjectsByCreatedDateForm
      produces:
        - application/json
      parameters:
        -
          name: created_date
          in: formData
          description: date of creation
          required: true
          type: string
          format: date-time-time
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Projects/created_date/{created_date}:
    get:
      tags:
        - Project
      description: |
        Retrieve `Project` objects created on or later than given date
      operationId: getProjectsByCreatedDate
      produces:
        - application/json
      parameters:
        -
          name: created_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Projects/modified_date:
    get:
      tags:
        - Project
      description: |
        Retrieve `Project` objects modified on or later than given date
      operationId: getProjectsByModifiedDateForm
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: formData
          description: date modified
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Projects/modified_date/{modified_date}:
    get:
      tags:
        - Project
      description: |
        Retrieve `Project` objects modified on or later than given date
      operationId: getProjectsByModifiedDate
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: path
          description: date modified
          required: true
          type: string
      responses:
        '200':
          description: projects response
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
              #/Projects/creator/{user_id}
              # get
              #/Projects/collaborator/{user_id}
              # get
              #/Projects/keywords/
              # get, takes array in formBody? or in url query?
              #/Projects/keywords/{keyword}
              # post delete
              #/Projects/urls/
              # get, take in formbody
              #/Projects/created
              #get use formdata ?
              #/Projects/modified
              #get use formdata
  
  /Project:
    post:
      tags:
        - Project
      description: |
        Creates `Project` objects. **project_name**, **project_description**,
        **project_creator_id**, and **is_project_private** are required,
        all others optional.
      operationId: createProject
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      -
        name: project_name
        in: formData
        required: true
        type: string
        description: Project's name
      -
        name: project_main_grant_type
        in: formData
        required: false
        type: string
        description: Project's grant type
      -
        name: project_description
        in: formData
        required: true
        type: string
        description: Description of project
      -
        name: project_creator_id
        in: formData
        required: true
        type: array
        items:
          type: string
        description: array of project creator ids
      -
        name: project_collaborators_id
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project collaborator ids
      -
        name: project_keywords
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project keywords
      -
        name: project_urls
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project URLs
      -
        name: grant_id
        in: formData
        required: false
        type: string
        description: Grant ID
      -
        name: university_id
        in: formData
        required: false
        type: string
        description: ID of university hosting research
      -
        name: grant_facilitator
        in: formData
        required: false
        type: string
        description: Name of individual fascilitating grant funding
      -
        name: project_file
        in: formData
        required: false
        type: array
        items:
          type: string
        description: files for grant
      -
        name: reviews
        in: formData
        required: false
        type: array
        items:
          type: string
        description: reviews
      -
        name: posts
        in: formData
        required: false
        type: array
        items:
          type: string
        description: posts related to project
      -
        name: is_project_private
        in: formData
        required: true
        type: boolean
        description: is project private?
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the created user
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    #should only modify users using the user/{id} route to make sure we don't
    # accidentally nike the wrong thing
  /Project/{id}:
    put:
      tags:
        - Project
      description: |
        Updates a `Project` object. All fields other than `id` optional.
      operationId: updateProject
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: project id
      -
        name: project_name
        in: formData
        required: false
        type: string
        description: Project's name
      -
        name: project_main_grant_type
        in: formData
        required: false
        type: string
        description: Project's grant type
      -
        name: project_description
        in: formData
        required: false
        type: string
        description: Description of project
      -
        name: project_creator_id
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project creator ids
      -
        name: project_collaborators_id
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project collaborator ids
      -
        name: project_keywords
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project keywords
      -
        name: project_urls
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of project URLs
      -
        name: grant_id
        in: formData
        required: false
        type: string
        description: Grant ID
      -
        name: university_id
        in: formData
        required: false
        type: string
        description: ID of university hosting research
      -
        name: grant_facilitator
        in: formData
        required: false
        type: string
        description: Name of individual fascilitating grant funding
      -
        name: project_file
        in: formData
        required: false
        type: array
        items:
          type: string
        description: files for grant
      -
        name: reviews
        in: formData
        required: false
        type: array
        items:
          type: string
        description: reviews
      -
        name: posts
        in: formData
        required: false
        type: array
        items:
          type: string
        description: posts related to project
      -
        name: is_project_private
        in: formData
        required: false
        type: boolean
        description: is project private?
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the updatee `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
      description: |
        Delete a 'Project' by their id.
      operationId: deleteProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: the `id` of the `Project` to delete
          required: true
          type: string
      responses:
        '200':
          description: The `id` of the deleted `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Project
      description: |
        Retrieve a 'Project' by their id.
      operationId: getProjectById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: the `id` of the `Project` to delete
          required: true
          type: string
      responses:
        '200':
          description: The `id` of the deleted `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/creators:
    get:
      tags:
        - Project
        - User
      description: |
        Get creators of a `Project`.
      operationId: getAllProjectCreators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `creators` associated with the `Project`
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
        - User
      description: |
        Set creators of a `Project`.
      operationId: setAllProjectCreators
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: creators
          in: formData
          description: The `ids` of the creators
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - User
      description: |
        Add to creators of a `Project`.
      operationId: addProjectCreators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: creators
          in: formData
          description: The `ids` of the creators
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - User
      description: |
        Remove all 'project_creators' from a `Project`.
      operationId: deleteProjectCreators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/creators/{user_id}:
    get:
      tags:
        - Project
        - User
      description: |
        Check if `User` is creator on `Project', return user if true.
      operationId: isUserCreatorOnProject
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The user id
          required: true
          type: string
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error' 
    post:
      tags:
        - Project
        - User
      description: |
        Set creator of a `Project`.
      operationId: setProjectCreator
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `id` of the creator
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - User
      description: |
        Add to creators of a `Project`.
      operationId: addProjectCreator
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `ids` of the creators
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - User
      description: |
        Remove a 'project_creator' from a `Project`.
      operationId: deleteProjectCreator
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `ids` of the creators
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/collaborators:
    get:
      tags:
        - Project
        - User
      description: |
        Get collaborators of a `Project`.
      operationId: getAllProjectCollaborators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `collaborators` associated with the `Project`
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
        - User
      description: |
        Set creators of a `Project`.
      operationId: setAllProjectCollaborators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: collaborators
          in: formData
          description: The `ids` of the ollaborators
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - User
      description: |
        Add to collaborators of a `Project`.
      operationId: addProjectCollaborators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: collaborators
          in: formData
          description: The `ids` of the collaborators
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - User
      description: |
        Remove all 'project_collaborators' from a `Project`.
      operationId: deleteProjectCollaborators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/collaborators/{user_id}:
    get:
      tags:
        - Project
        - User
      description: |
        Check if `User` is collaborator on `Project', return if true
      operationId: isUserCollaboratorOnProject
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The user id
          required: true
          type: string
      responses:
        # Response code
        '200':
          description: The user
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error' 
    post:
      tags:
        - Project
        - User
      description: |
        Set collaborators of a `Project`.
      operationId: setProjectCollaborators
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `id` of the collaborator
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - User
      description: |
        Add to collaborator of a `Project`.
      operationId: addProjectCollaborator
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `ids` of the collaborator
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - User
      description: |
        Remove a 'project_collaborator' from a `Project`.
      operationId: deleteProjectCollaborator
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: user_id
          in: path
          description: The `ids` of the collaborator
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/urls:
    get:
      tags:
        - Project
      description: |
        Get urls of a `Project`.
      operationId: getAllProjectUrls
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `urls` associated with the `Project`
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
      description: |
        Set urls of a `Project`.
      operationId: setAllProjectUrls
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: urls
          in: formData
          description: The `urls` of the project
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
      description: |
        Add to urls of a `Project`.
      operationId: addProjectUrls
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: urls
          in: formData
          description: The `urls` of the `Project``
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
      description: |
        Remove all 'urls' from a `Project`.
      operationId: deleteProjectUrls
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/keys:
    get:
      tags:
        - Project
      description: |
        Get keywords of a `Project`.
      operationId: getAllProjectKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `keywords` associated with the `Project`
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
      description: |
        Set keywords of a `Project`.
      operationId: setAllProjectKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: keywords
          in: formData
          description: The `keywords` of the `Project``
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
      description: |
        Add to keywords of a `Project`.
      operationId: addProjectKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: keywords
          in: formData
          description: The `ids` of the collaborators
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
      description: |
        Remove all 'keywords' from a `Project`.
      operationId: deleteProjectKeywords
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/keys/{keyword}:
    get:
      tags:
        - Project
      description: |
        Check if keyword is on `Project'.
      operationId: isKeywordOnProject
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `User` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The keyword
          required: true
          type: string
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error' 
    post:
      tags:
        - Project
      description: |
        Set keyword of a `Project`.
      operationId: setProjectKeyword
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The `keyword`
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
      description: |
        Add to keyword of a `Project`.
      operationId: addProjectKeyword
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The keyword
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
      description: |
        Remove a 'keyword' from a `Project`.
      operationId: deleteProjectKeyword
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: keyword
          in: path
          description: The keyword
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/files:
    get:
      tags:
        - Project
      description: |
        Get files of a `Project`.
      operationId: getAllProjectFiles
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `files` associated with the `Project`
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
      description: |
        Set files of a `Project`.
      operationId: setAllProjectFiles
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: files
          in: formData
          description: The `files` of the project
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
      description: |
        Add to files of a `Project`.
      operationId: addProjectFiles
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: urls
          in: formData
          description: The `files` of the `Project``
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
      description: |
        Remove all 'files' from a `Project`.
      operationId: deleteProjectFiles
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/reviews:
    get:
      tags:
        - Project
        - Review
      description: |
        Get reviews of a `Project`.
      operationId: getAllProjectReviews
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `reviews` associated with the `Project`
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
        - Review
      description: |
        Set reviews of a `Project`.
      operationId: setAllProjectReviews
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: reviews
          in: formData
          description: The `ids` of the reviews
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - Review
      description: |
        Add to reviews of a `Project`.
      operationId: addProjectReviews
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: reviews
          in: formData
          description: The `ids` of the reviews
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - Review
      description: |
        Remove all 'reviews' from a `Project`.
      operationId: deleteProjectReviews
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/reviews/{review_id}:
    get:
      tags:
        - Project
        - Review
      description: |
        Check if `Review` of a `Project` if it is on project
      operationId: isReviewOnOProject
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `id` of the review
          required: true
          type: string
      responses:
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - Review
      description: |
        Add review to a `Project`.
      operationId: addProjectReview
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `id` of the review
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - Review
      description: |
        Remove a 'review' from a `Project`.
      operationId: deleteProjectReview
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: review_id
          in: path
          description: The `ids` of the review
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/posts:
    get:
      tags:
        - Project
        - Post
      description: |
        Get posts of a `Project`.
      operationId: getAllProjectPosts
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `reviews` associated with the `Project`
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
        - Post
      description: |
        Set posts of a `Project`.
      operationId: setAllProjectPosts
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: posts
          in: formData
          description: The `ids` of the posts
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - Post
      description: |
        Add to posts of a `Project`.
      operationId: addProjectPosts
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: reviews
          in: formData
          description: The `ids` of the posts
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - Post
      description: |
        Remove all 'posts' from a `Project`.
      operationId: deleteProjectPosts
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/posts/{post_id}:
    get:
      tags:
        - Project
        - Post
      description: |
        Check if `Post` is on a `Project`
      operationId: isPostOnProject
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: post_id
          in: path
          description: The `id` of the post
          required: true
          type: string
      responses:
        '200':
          description: The post
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - Post
      description: |
        Add post to a `Project`.
      operationId: addProjectPost
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: post_id
          in: path
          description: The `id` of the post
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - Post
      description: |
        Remove a 'post' from a `Project`.
      operationId: deleteProjectPost
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: post_id
          in: path
          description: The `ids` of the post
          required: true
          type: string
      responses:
        '200':
          description: The `project_id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/project_name:
    get:
      tags:
        - Project
      description: |
        Retrieve project_name associated with a `Project`.
      operationId: getProjectNameById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The project_name
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
      description: |
        Delete project_name from a project
      operationId: deleteUserProjectName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_name` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/name/{project_name}:
    get:
      tags:
        - Project
      description: |
        Check if project name of `Project` is some value
      operationId: isNameOnProject
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_name
          in: path
          description: The `project_name` of the `Project`
          required: true
          type: string
      responses:
        '200':
          description: The post
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
      description: |
        Add project_name to a `Project`.
      operationId: addProjectName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_name
          in: path
          description: The project_name
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
      description: |
        Modify project_name of a `Project`.
      operationId: modifyProjectName
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_name
          in: path
          description: The project_name
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/grant_type:
    get:
      tags:
        - Project
        - Grant
        - REFACTOR-TODO-move-grant-stuff-to-grant-object
      description: |
        Retrieve project_main_grant_type associated with a `Project`.
      operationId: getProjectGrantTypeById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The project_main_grant_type
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - Grant
        - REFACTOR-TODO-move-grant-stuff-to-grant-object
      description: |
        Delete project_main_grant_type from a project
      operationId: deleteProjectGrantType
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_main_grant_type` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/grant_type/{project_main_grant_type}:
    get:
      tags:
        - Project
        - Grant
        - REFACTOR-TODO-move-grant-stuff-to-grant-object
      description: |
        Check if grant tyoe  of `Project` is some value
      operationId: isGrantTypeOnProject
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_main_grant_type
          in: path
          description: The `project_main_grant_type` of the `Project`
          required: true
          type: string
      responses:
        '200':
          description: The post
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
        - Grant
        - REFACTOR-TODO-move-grant-stuff-to-grant-object
      description: |
        Add project_name to a `Project`.
      operationId: setProjectGrantType
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_main_grant_type
          in: path
          description: The project_main_grant_type
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - Grant
        - REFACTOR-TODO-move-grant-stuff-to-grant-object
      description: |
        Modify project_name of a `Project`.
      operationId: modifyProjectGrantType
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_main_grant_type
          in: path
          description: The project_main_grant_type
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/description:
    get:
      tags:
        - Project
      description: |
        Retrieve project_description associated with a `Project`.
      operationId: getProjectDescriptionById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The project_description
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
      description: |
        Delete project_description from a project
      operationId: deleteProjectDescription
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `project_description` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/description/{project_description}:
    get:
      tags:
        - Project
      description: |
        Check if project descript of `Project` is some value
      operationId: isProjectDescriptionOnProject
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_description
          in: path
          description: The `project_description` of the `Project`
          required: true
          type: string
      responses:
        '200':
          description: The post
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
      description: |
        Add project_description to a `Project`.
      operationId: setProjectDescription
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_description
          in: path
          description: The project_description
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
      description: |
        Modify project_description of a `Project`.
      operationId: modifyProjectDescription
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: project_description
          in: path
          description: The project_description
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/grant:
    get:
      tags:
        - Project
        - Grant
      description: |
        Retrieve grant associated with a `Project`.
      operationId: getProjectGrantById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The grant
          schema:
            $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - Grant
      description: |
        Delete grant from a project
      operationId: deleteProjectGrant
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `grant` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/grant/{grant_id}:
    get:
      tags:
        - Project
        - Grant
      description: |
        Check if `Grant` is on `Project`
      operationId: isGrantOnProject
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: grant_id
          in: path
          description: The `grant_id` of the `Project`
          required: true
          type: string
      responses:
        '200':
          description: The post
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
        - Grant
      description: |
        Add grant to a `Project`.
      operationId: setProjectGrant
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: grant_id
          in: path
          description: The grant_id
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - Grant
      description: |
        Modify grant of a `Project`.
      operationId: modifyProjectGrant
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: grant_id
          in: path
          description: The grant_id
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/uni:
    get:
      tags:
        - Project
        - University
      description: |
        Retrieve universities associated with a `Project`.
      operationId: getUniversitiesById
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The grant
          schema:
            $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Project
        - University
      description: |
        Delete all universities from a project
      operationId: deleteProjecUniversities
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The `id` associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/uni/{university_id}:
    get:
      tags:
        - Project
        - University
      description: |
        Check if project descript of `Project` is some value
      operationId: isUniversityOnProject
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The id of the `University`
          required: true
          type: string
      responses:
        '200':
          description: The post
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Project
        - University
      description: |
        Set university_id to a `Project`.
      operationId: setProjectUniversity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The university_id
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
        - University
      description: |
        Modify university_id of a `Project`.
      operationId: modifyProjectUniversity
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: university_id
          in: path
          description: The university_id
          required: true
          type: string
      responses:
        '200':
          description: The id associated with the `Project`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Project/{id}/private:
    get:
      tags:
        - Project
      description: |
        Retrieve is_private from a  `Project`.
      operationId: isProjectPrivate
      produces:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
      responses:
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Project
      description: |
        Set is_private from a  `Project`.
      operationId: setIsProjectPrivate
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: id
          in: path
          description: The `id` of the `Project` to retrieve
          required: true
          type: string
        -
          name: is_private
          in: formData
          description: is project private?
          required: true
          type: boolean
      responses:
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  ######################################
    ################Posts#################
    ######################################
  #searches

  #/Posts/author/{user_id}
  #get
  #/Posts/tags/{user_id}
  #get
  #/Posts/keys/{keyword}
  #get
  #/Posts/keys
  #get (multiple keywords, either formData or url query)

  #/Posts/created
  #get, use formdata so we can just pass json I think
  #Posts/modified
  #get, use formdata so we can just pass json I think

    #/Post
    # get put post delete
    #/Post/{id}
    # get put delete
    #/Post/{id}/tags
    # get put post delete
    #/Post/{id}/tags/{user_id}
    # get put post delete
    #/Post/{id}/keys
    # get put post delete, either formBody or urlQuery
    #/Post/{id}/keys/{keyword}
    # post delete, get and put don't make sense here since we clearly already know the keyword
    #/Post/{id}/title
    #get put
    #/Post/{id}/text
    #get put post delete
    #/Post/{id}/author
    #get delete
    #/Post/{id}/private
    #get put


  /Posts:
    get:
      tags:
        - Post
      description: |
        Gets `Post` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: getPosts
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: size
          in: formData
          description: Max size of array to return
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: Location in pagination
          required: true
          type: number
          format: int32
        -
          name: post_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific `Post`
        -
          name: created_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `Post` creation
        -
          name: updated_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `Post` update
        -
          name: post_tags_id
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of `User`s tagged in `Post`
        -
          name: post_keywords
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of keywords for `Post`
        -
          name: post_title
          in: formData
          required: false
          type: string
          description: ID of `User` author of post
        -
          name: post_text
          in: formData
          required: false
          type: string
          description: ID of `User` author of post                    
        -
          name: post_creator_id
          in: formData
          required: false
          type: string
          description: ID of `User` author of post          
        -
          name: is_post_private
          in: formData
          required: false
          type: boolean
          description: is `Post` private?
      responses:
        # Response code
        '200':
          description: An array of posts
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'




      ######################################
      ##############Definitions#############
      ######################################
  /Posts/author/{user_id}:
    get:
      tags:
        - Post
        - User
      description: |
        Retrieve `Post` objects with a particular `User` as author
      operationId: getPostsByAuthorId
      produces:
        - application/json
      parameters:
        -
          name: user_id
          in: path
          description: ID of 'User' to fetch
          required: true
          type: string
      responses:
        # Response code
        '200':
          description: An array of posts
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Posts/keys:
    get:
      tags:
          - Post
      description: |
        Retrieve `Project` objects by a set of keywords
      operationId: getPostsByKeywords
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: keywords
          in: formData
          description: Keywords when searching for user
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
      # Response code
        '200':
          description: An array of posts
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Posts/keys/{keyword}:
    get:
      tags:
        - Post
      description: |
        Retrieve `Project` objects by a particular keyword
      operationId: getPostsByKeyword
      produces:
        - application/json
      parameters:
        -
          name: keyword
          in: path
          description: keyword to search for
          required: true
          type: string
      responses:
        '200':
          description: posts response
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Posts/created_date:
    get:
      tags:
        - Post
      description: |
        Retrieve `Post` objects created on or later than given date
      operationId: getPostsByCreatedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: created_date
          in: formData
          description: date of creation
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: posts response
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Posts/created_date/{created_date}:
    get:
      tags:
        - Post
      description: |
        Retrieve `Post` objects created on or later than given date
      operationId: getPostsByCreatedDate
      produces:
        - application/json
      parameters:
        -
          name: created_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: posts response
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Posts/modified_date:
    get:
      tags:
        - Post
      description: |
        Retrieve `Post` objects modified on or later than given date
      operationId: getPostsByModifiedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: modified_date
          in: formData
          description: date of modification
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: posts response
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Posts/modified_date/{modified_date}:
    get:
      tags:
        - Post
      description: |
        Retrieve `Post` objects created on or later than given date
      operationId: getPostsByModifiedDate
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: posts response
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    

  /Post:
    post:
      tags:
        - Post
      description: |
        Creates `Post` objects.  **post_tags_id** and **post_keywords** optional, all others required.
      operationId: createPost
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      -
        name: post_title
        in: formData
        required: true
        type: string
        description: ID of `User` author of post
      -
        name: post_text
        in: formData
        required: true
        type: string
        description: ID of `User` author of post  
      -
        name: post_creator_id
        in: formData
        required: true
        type: string
        description: ID of `User` author of post
      -
        name: post_tags_id
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of `User`s tagged in `Post`
      -
        name: post_keywords
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of keywords for `Post`
      -
        name: is_post_private
        in: formData
        required: true
        type: boolean
        description: is `Post` private?
        # Expected responses for this operation:
      responses:
        '200':
          description: the id of the created `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Post/{id}:
    get:
      tags:
          - Post
      description: |
        Retrieves `Post` objects by **id**.
      operationId: getPostById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      responses:
        # Response code
        '200':
          description: The `Post`
          schema:
            $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Post
      description: |
        Updates `Post` objects. **id** is required,
        all others optional.
      operationId: updatePosttById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: post_title
        in: formData
        required: false
        type: string
        description: The `Post` name
      -
        name: post_text
        in: formData
        required: false
        type: string
        description: The `Post` body
      -
        name: post_creator_id
        in: formData
        required: false
        type: string
        description: ID of `User` author of post
      -
        name: post_tags_id
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of `User`s tagged in `Post`
      -
        name: post_keywords
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of keywords for `Post`
      -
        name: is_post_private
        in: formData
        required: false
        type: boolean
        description: Is post private?
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: A `Post` object
          schema:
            $ref: '#/definitions/Post'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Post
      description: |
        Deletes `Post` objects by **id**.
      operationId: deletePostById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      responses:
        # Response code
        '200':
          description: The `Post` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
  /Post/{id}/tags:
    get:
      tags:
        - Post
      description: |
        Retrieves `Post` tags
      operationId: getPostTagsById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      responses:
        # Response code
        '200':
          description: The ids of the tagged `User` ids
          schema:
            type: array
            items:
                type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Replaces tags on `Post` objects. **id** and **tagged_users* both required.
      operationId: replacePostTagsById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: tagged_users
        in: formData
        required: true
        type: array
        items: 
          type: string
        description:  new tags
      tags:
        - Post
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Post
      description: |
        Deletes all tags on a `Post` objects by **id**.
      operationId: deleteProjectTagsById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      responses:
        # Response code
        '200':
          description: The `Post` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Post/{id}/tags/{user_id}:
    get:
      tags:
        - Post
        - User
      description: |
        Retrieves whether user is tagged on past
      operationId: getIsUserTagOnProject
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      -
        name: user_id
        in: path
        required: true
        type: string
        description: user_id to check for
      responses:
        # Response code
        '200':
          description: Boolean of whether the user is taged
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Post
        - User
      description: |
        Adds tags to `Post` objects. **id** and **user_id** both required.
      operationId: updatePostTagsById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: user_id
        in: path
        required: true
        type: array
        items:
          type: string
        description:  new tags
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Post
        - User
      description: |
        Adds tag to `Post` objects. **id** and **user_id** both required.
      operationId: addPostTagsByIdPost
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: user_id
        in: path
        required: true
        type: string
        description: The `User` id
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Post
        - User
      description: |
        Deletes the tags on a `Post` objects by **id** and **user_id**
      operationId: deletePostTagsById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: user_id
        in: path
        required: true
        type: string
        description: The `User` id
      responses:
        # Response code
        '200':
          description: The `Post` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'  
  /Post/{id}/keys:
    get:
      tags:
        - Post
      description: |
        Retrieves `Post` keywords
      operationId: getPostKeywordsById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      responses:
        # Response code
        '200':
          description: The keywords
          schema:
            type: array
            items:
                type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Post
      description: |
        Adds keywords to `Post` objects. **id** and **keywords** both required.
      operationId: updateProjectKeywordsById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: keywords
        in: formData
        required: true
        type: array
        items: 
          type: string
        description:  new keywords
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Post
      description: |
        Replaces keywords on `Post` objects. **id** and **keywords* both required.
      operationId: replacePostKeywordsById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: keywords
        in: formData
        required: true
        type: array
        items: 
          type: string
        description:  new tags
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Post
      description: |
        Deletes all tags on a `Post` objects by **id**.
      operationId: deletePostKeywordsById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      responses:
        # Response code
        '200':
          description: The `Post` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
              $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing
  /Post/{id}/keys/{keyword}:
    get:
      tags:
        - Post
      description: |
        Retrieves whether keyword is on past
      operationId: isKeywordOnPost
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      -
        name: keyword
        in: path
        required: true
        type: string
        description: the keyword
      responses:
        # Response code
        '200':
          description: Boolean of whether the user is taged
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Post
      description: |
        Adds tags to `Post` objects. **id** and **keyword** both required.
      operationId: addPostKeywordById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post's name
      -
        name: keyword
        in: path
        required: true
        type: string
        description: the keyword
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Post
      description: |
        Adds keyword to `Post` objects. **id** and **user_id* both required.
      operationId: addPostKeywordByIdPost
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: keyword
        in: path
        required: true
        type: string
        description: The `User` id
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Post
      description: |
        Deletes a keyword on a `Post` objects by **id** and **keyword**
      operationId: deletePostKeywordById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: keyword
        in: path
        required: true
        type: string
        description: The keyword
      responses:
        # Response code
        '200':
          description: The `Post` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Post/{id}/title:
    get:
      tags:
        - Post
      description: |
        Retrieves `Post` title
      operationId: getPostTitleById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      responses:
        # Response code
        '200':
          description: The title
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Post
      description: |
        Sets the post title.  **id** and **title** both required.
      operationId: updatePostTitleById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: title
        in: formData
        required: true
        type: string
        description:  new title
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Post
      description: |
        Sets the post title.  **id** and **title** both required.
      operationId: updatePostTitleByIdPost
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: title
        in: formData
        required: true
        type: string
        description:  new title
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Post
      description: |
        Deletes title of a `Post` objects by **id**.
      operationId: deletePosTitleById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      responses:
        # Response code
        '200':
          description: The `Post` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Post/{id}/text:
    get:
      tags:
        - Post
      description: |
        Retrieves `Post` text
      operationId: getPostTextById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      responses:
        # Response code
        '200':
          description: The text
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Post
      description: |
        Sets the post title.  **id** and **text** both required.
      operationId: updatePostTextById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: text
        in: formData
        required: true
        type: string
        description:  new text
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Post
      description: |
        Sets the post text.  **id** and **text** both required.
      operationId: updatePostTextByIdPost
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      -
        name: text
        in: formData
        required: true
        type: string
        description:  new title
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Post
      description: |
        Deletes text of a `Post` objects by **id**.
      operationId: deletePostTextById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      responses:
        # Response code
        '200':
          description: The `Post` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Post/{id}/author:
    get:
      tags:
        - Post
        - User
      description: |
        Retrieves `Post` author
      operationId: getPostAuthorById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      responses:
        # Response code
        '200':
          description: The author
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Sets the post author.  **id** and **author** both required.
      operationId: updatePostAuthorById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      -
        name: author
        in: formData
        required: true
        type: string
        description:  new author
      tags:
        - Post
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Sets the post author.  **id** and **author** both required.
      operationId: updatePostAuthorByIdPost
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      -
        name: text
        in: formData
        required: true
        type: string
        description:  new author
      tags:
        - Post
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Post
      description: |
        Deletes text of a `Post` author by **id**.
      operationId: deletePostAuthorById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      responses:
        # Response code
        '200':
          description: The `Post` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Post/{id}/private:
    get:
      tags:
        - Post
      description: |
        Retrieves whether `Post` is private
      operationId: isPostPrivateById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: |
        Sets the post privacy.  **id** and **is_private** both required.
      operationId: updatePostPrivacyById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      -
        name: is_private
        in: formData
        required: true
        type: boolean
        description:  is post private?
      tags:
        - Post
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: |
        Sets the post privacy.  **id** and **is_private** both required.
      operationId: updatePostPrivacyByIdPost
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` id
      -
        name: is_private
        in: formData
        required: true
        type: boolean
        description:  is post private?
      tags:
        - Post
      # Expected responses for this operation:
      responses:
        # Response code
        '200':
          description: The `id` of the `Post`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'   
            
            
  ######################################
  ################Grants################
  ######################################

  #/Grant
  #get put post delete
  #/Grant/{id}
  #get put delete
  #/Grant/{id}/description
  #get put
  #/Grant/{id}/amount
  #get put
  #/Grant/{id}/created
  #get
  #/Grant/{id}/modified
  #get
  #/Grant/{id}/url
  #get put

  #/Grants/created
  #get
  #/Grants/modified
  #get
  #/Grants/amount
  #get
  #/Grants/keys
  #get

  /Grants:
    get:
      tags:
        - Grant
      description: |
        Gets `Grant` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: getGrants
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: size
          in: formData
          description: Max size of array to return
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: Location in pagination
          required: true
          type: number
          format: int32
        -
          name: grant_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific `Grant`
        -
          name: created_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `Grant` creation
        -
          name: updated_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `Grant` update
        -
          name: grant_url
          in: formData
          required: false
          type: array
          items:
            type: string
          description: array of URLs in `Grant`
        -
          name: grant_description
          in: formData
          required: false
          type: string
          description: array of keywords for `Grant`
        -
          name: grant_amount
          in: formData
          required: false
          type: string
          description: Amount of `Grant`
        -
          name: min_amount
          in: formData
          required: false
          type: string
          description: Minimum `Grant` amount to search
        -
          name: max_amount
          in: formData
          required: false
          type: string
          description: Maximum `Grant` amount to search          
      responses:
        # Response code
        '200':
          description: An array of `Grant` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'




  
  /Grants/keys:
    get:
      tags:
          - Grant
      description: |
        Retrieve `Grant` objects by a set of keywords
      operationId: getGrantsByKeywords
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: keywords
          in: formData
          description: Keywords when searching for user
          required: true
          type: array
          items:
            type: string
          collectionFormat: csv
      responses:
      # Response code
        '200':
          description: An array of `Grant` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Grants/keys/{keyword}:
    get:
      tags:
        - Grant
      description: |
        Retrieve `Project` objects by a particular keyword
      operationId: getGrantsByKeyword
      produces:
        - application/json
      parameters:
        -
          name: keyword
          in: path
          description: keyword to search for
          required: true
          type: string
      responses:
        '200':
          description: Array of `Grant` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Grants/created_date:
    get:
      tags:
        - Grant
      description: |
        Retrieve `Grant` objects created on or later than given date
      operationId: getGrantsByCreatedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: created_date
          in: formData
          description: date of creation
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Array of `Grant` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Grants/created_date/{created_date}:
    get:
      tags:
        - Grant
      description: |
        Retrieve `Grant` objects created on or later than given date
      operationId: getGrantsByCreatedDate
      produces:
        - application/json
      parameters:
        -
          name: created_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: Array of `Grant` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Grants/modified_date:
    get:
      tags:
        - Grant
      description: |
        Retrieve `Grant` objects modified on or later than given date
      operationId: getGrantsByModifiedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: modified_date
          in: formData
          description: date of modification
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Array of `Grant` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Grants/modified_date/{modified_date}:
    get:
      tags:
        - Grant
      description: |
        Retrieve `Grant` objects created on or later than given date
      operationId: getGrantsByModifiedDate
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: Array of `Grant` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Grants/amount:
    get:
      tags:
        - Grant
      description: |
        Retrieve `Grant` objects based on amount
      operationId: getGrantsByAmount
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: minimum
          in: formData
          description: minimum grant amount
          required: true
          type: number
          format: float
        -
          name: maximum
          in: formData
          description: maximum grant amount
          required: true
          type: number
          format: float          
      responses:
        '200':
          description: Array of `Grant` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'        
  /Grants/amount/min/{amount}:
    get:
      tags:
        - Grant
      description: |
        Retrieve `Grant` objects based on amount
      operationId: getGrantsByMinAmount
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: amount
          in: path
          description: minimum grant amount
          required: true
          type: number
          format: float
      responses:
        '200':
          description: Array of `Grant` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Grants/amount/max/{amount}:
    get:
      tags:
        - Grant
      description: |
        Retrieve `Grant` objects based on amount
      operationId: getGrantsByMaxAmount
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: amount
          in: path
          description: maxiumum grant amount
          required: true
          type: number
          format: float
      responses:
        '200':
          description: Array of `Grant` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            

  /Grant:
    post:
      tags:
        - Grant
      description: |
        Creates `Grant` objects. All fields required.
      operationId: createGrant
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      -
        name: grant_url
        in: formData
        required: true
        type: string
        description: array of URLs for `Grant`
      -
        name: grant_description
        in: formData
        required: true
        type: string
        description: Description of grant
      -
        name: amount
        in: formData
        required: true
        type: number
        description: Amount of grant
      responses:
        '200':
          description: the id of the created `Grant`
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Grant/{id}:
    get:
      tags:
          - Grant
      description: |
        Retrieves `Grant` objects by **id**.
      operationId: getGrantById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      responses:
        # Response code
        '200':
          description: The `Grant`
          schema:
            $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Grant
      description: |
        Updates `Grant` objects. **id** is required,
        all others optional.
      operationId: updateGrantById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: grant_url
        in: formData
        required: false
        type: array
        items:
          type: string
        description: array of URLs for `Grant`
      -
        name: grant_description
        in: formData
        required: false
        type: string
        description: Description of `Grant`
      -
        name: amount
        in: formData
        required: false
        type: number
        format: float
        description: Amount of `Grant`
      responses:
        # Response code
        '200':
          description: A `Grant` object
          schema:
            $ref: '#/definitions/Grant'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Grant
      description: |
        Deletes `Grant` objects by **id**.
      operationId: deleteGrantById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
  /Grant/{id}/created:
    get:
      tags:
          - Grant
      description: |
        Retrieves `Grant` object created date
      operationId: getGrantCreatedDate
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      responses:
        # Response code
        '200':
          description: The `Grant` creation date
          schema:
            type: string
            format: date-time
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Grant/{id}/modified:
    get:
      tags:
          - Grant
      description: |
        Retrieves `Grant` objects modified date
      operationId: getGrantModifiedDate
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      responses:
        # Response code
        '200':
          description: The `Grant` modified date
          schema:
            type: string
            format: date-time
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Grant/{id}/url:
    get:
      tags:
          - Grant
      description: |
        Retrieves `Grant` url
      operationId: getGrantUrl
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      responses:
        # Response code
        '200':
          description: The `Grant` url array
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'       
    put:
      tags:
          - Grant
      description: |
        Add `Grant` url
      operationId: addGrantUrl
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: url
        in: formData
        required: true
        type: string
        description: The `Grant` url
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'     
    post:
      tags:
          - Grant
      description: |
        Replace `Grant` url array
      operationId: setGrantUrls
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: urls
        in: formData
        required: true
        type: array
        items:
          type: string
        description: The `Grant` urls
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      
    delete:
      tags:
          - Grant
      description: |
        Clear `Grant` url array
      operationId: clearGrantUrls
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'               
  /Grant/{id}/description:
    get:
      tags:
          - Grant
      description: |
        Retrieves `Grant` description
      operationId: getGrantDescription
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'           
    put:
      tags:
          - Grant
      description: |
        Modify `Grant` description
      operationId: modifyGrantDescription
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: description
        in: formData
        required: true
        type: string
        description: the `Grant` description
      responses:
        # Response code
        '200':
          description: The `Grant` url array
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'                
    post:
      tags:
          - Grant
      description: |
        Set `Grant` description
      operationId: setGrantDescription
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: description
        in: formData
        required: true
        type: string
        description: the `Grant` description
      responses:
        # Response code
        '200':
          description: The `Grant` url array
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'   
    delete:
      tags:
          - Grant
      description: |
        Clear `Grant` description
      operationId: clearGrantDescription
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'              
  /Grant/{id}/amount:
    get:
      tags:
          - Grant
      description: |
        Retrieves `Grant` amount
      operationId: getGrantAmount
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      responses:
        # Response code
        '200':
          description: The `Grant` amount
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'           
    put:
      tags:
          - Grant
      description: |
        Modify `Grant` amount
      operationId: modifyGrantAmount
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: amount
        in: formData
        required: true
        type: number
        format: float
        description: the `Grant` amount
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'                
    post:
      tags:
          - Grant
      description: |
        Set `Grant` amount
      operationId: setGrantAmount
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: amount
        in: formData
        required: true
        type: number
        format: float
        description: the `Grant` amount
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'   
    delete:
      tags:
          - Grant
      description: |
        Clear `Grant` amount
      operationId: clearGrantAmount
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'   
  /Grant/{id}/amount/{amount}:
    get:
      tags:
          - Grant
      description: |
        Retrieves if `Grant` amount is equal to param
      operationId: isGrantAmount
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: amount
        in: path
        required: true
        type: string
        description: The `Grant` amount
      responses:
        # Response code
        '200':
          description: The `Grant` amount
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'           
    put:
      tags:
          - Grant
      description: |
        Modify `Grant` amount
      operationId: modifyGrantAmountPath
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: amount
        in: path
        required: true
        type: string
        description: the `Grant` amount
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'                
    post:
      tags:
          - Grant
      description: |
        Set `Grant` amount
      operationId: setGrantAmountPath
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: amount
        in: path
        required: true
        type: string
        description: the `Grant` amount
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'   
  /Grant/{id}/keys:
    get:
      tags:
          - Grant
      description: |
        Retrieves `Grant` keywords
      operationId: getGrantKeywords
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` keywords
      responses:
        # Response code
        '200':
          description: The `Grant` keywords
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'           
    put:
      tags:
          - Grant
      description: |
        Modify `Grant` keywords
      operationId: addGrantKeywords
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: keywords
        in: formData
        required: true
        type: array
        items: 
          type: string
        description: the `Grant` keywords
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'                
    post:
      tags:
          - Grant
      description: |
        Set `Grant` keywords
      operationId: setGrantKeywords
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: keywords
        in: formData
        required: true
        type: array
        items: 
          type: string
        description: the `Grant` keywords
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'   
    delete:
      tags:
          - Grant
      description: |
        Clear `Grant` keywords
      operationId: clearGrantKeywords
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` id
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'   
  /Grant/{id}/keys/{keyword}:
    get:
      tags:
          - Grant
      description: |
        Retrieves if `Grant` amount is equal to param
      operationId: isGrantHaveKeyword
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: keyword
        in: path
        required: true
        type: string
        description: The `Grant` keyword
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'           
    put:
      tags:
          - Grant
      description: |
        Add `Grant` keyword
      operationId: addGrantKeyword
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: keyword
        in: path
        required: true
        type: string
        description: the `Grant` keyword
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'                
    post:
      tags:
          - Grant
      description: |
        Set `Grant` keyword
      operationId: setGrantKeywordPath
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: keyword
        in: path
        required: true
        type: string
        description: the `Grant` keyword
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'   
    delete:
      tags:
          - Grant
      description: |
        Set `Grant` keyword
      operationId: deleteGrantKeyword
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Grant` name
      -
        name: keyword
        in: path
        required: true
        type: string
        description: the `Grant` keyword
      responses:
        # Response code
        '200':
          description: The `Grant` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'   


  ######################################
  ###############Reviews################
  ######################################

  #/Review
  #get put post delete
  #/Review/{id}
  #get put delete
  #/Review/{id}/body
  #get put
  #/Review/{id}/reviewer
  #get put
  #/Review/{id}/rating
  #get put
  #/Review/{id}/modified
  #get
  #/Review/{id}/url
  #get put

  #/Reviews/created
  #get
  #/Reviews/modified
  #get
  #/Reviews/rating
  #get
  #/Reviews/reviewer/{id}
  #get
  #/Reviews/keys (? should we do keywords here?)
  #get


  /Reviews:
    get:
      tags:
        - Review
      description: |
        Gets `Review` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: getReviewss
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: size
          in: formData
          description: Max size of array to return
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: Location in pagination
          required: true
          type: number
          format: int32
        -
          name: review_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific `Review`
        -
          name: created_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `Review` creation
        -
          name: updated_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `Review` update
        -
          name: reviewer_id
          in: formData
          required: false
          type: string
          description: id of `User` reviewer
        -
          name: review_body
          in: formData
          required: false
          type: string
          description: body of `Review`
        -
          name: rating
          in: formData
          required: false
          type: number
          format: int32
          description: Integer rating of review (1-5)
      responses:
        # Response code
        '200':
          description: An `Review` object
          schema:
            $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Reviews/created_date:
    get:
      tags:
        - Review
      description: |
        Retrieve `Review` objects created on or later than given date
      operationId: getReviewsByCreatedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: created_date
          in: formData
          description: date of creation
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Array of `Reviews` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Reviews/created_date/{created_date}:
    get:
      tags:
        - Review
      description: |
        Retrieve `Reviews` objects created on or later than given date
      operationId: getReviewsByCreatedDate
      produces:
        - application/json
      parameters:
        -
          name: created_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: Array of `Review` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Reviews/modified_date:
    get:
      tags:
        - Review
      description: |
        Retrieve `Review` objects modified on or later than given date
      operationId: getReviewssByModifiedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: modified_date
          in: formData
          description: date of modification
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Array of `Review` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Reviews/modified_date/{modified_date}:
    get:
      tags:
        - Review
      description: |
        Retrieve `Review` objects created on or later than given date
      operationId: getReviewsByModifiedDate
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: Array of `Reviews` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      
  /Reviews/reviewer/{user_id}:
    get:
      tags:
        - Review
        - User
      description: |
        Retrieve `Review` objects with specified reviewer
      operationId: getReviewsByReviewer
      produces:
        - application/json
      parameters:
        -
          name: user_id
          in: path
          description: id of `User` reviewer
          required: true
          type: string
      responses:
        '200':
          description: Array of `Reviews` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      
  /Reviews/rating:
    get:
      tags:
        - Review
      description: |
        Retrieve `Review` objects with a rating in the given range
      operationId: getReviewsByRating
      produces:
        - application/json
      consumes:
        - application/json        
      parameters:
        -
          name: min
          in: formData
          description: Minimum rating (>= 1)
          required: true
          type: number
          format: int32
        -
          name: max
          in: formData
          description: Maximum rating (<= 5)
          required: true
          type: number
          format: int32
      responses:
        '200':
          description: Array of `Reviews` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Reviews/rating/min/{rating}:
    get:
      tags:
        - Review
      description: |
        Retrieve `Review` objects with a rating greater than or equal to **rating**
      operationId: getReviewsByMinRating
      produces:
        - application/json
      consumes:
        - application/json        
      parameters:
        -
          name: rating
          in: path
          description: Minimum rating (1 <= rating <= 5)
          required: true
          type: number
          format: int32
      responses:
        '200':
          description: Array of `Reviews` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'


  /Review/{id}:
    get:
      tags:
          - Review
      description: |
        Retrieves `Review` objects by **id**.
      operationId: getReviewById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` name
      responses:
        # Response code
        '200':
          description: The `Review`
          schema:
            $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Review
      description: |
        Updates `Review` objects. **id** is required,
        all others optional.
      operationId: updateReviewById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: review_body
        in: formData
        required: false
        type: string
        description: body of `Review`
      -
        name: reviewer_id
        in: formData
        required: false
        type: string
        description: User who wrote `Review`
      -
        name: rating
        in: formData
        required: false
        type: number
        format: int32
        description: Rating (1 <= rating <= 5)
      responses:
        # Response code
        '200':
          description: A `Review` object
          schema:
            $ref: '#/definitions/Review'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Review
      description: |
        Deletes `Review` objects by **id**.
      operationId: deleteReviewById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Review` name
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
  /Review/{id}/body:
    get:
      tags:
        - Review
      description: |
        Sets body of review
      operationId: getReviewBodyById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      responses:
        # Response code
        '200':
          description: The `Review` body
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Review
      description: |
        Updates `Review` body. 
      operationId: updateReviewBodyById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` name
      -
        name: body
        in: formData
        required: true
        type: string
      responses:
        # Response code
        '200':
          description: A `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Review
      description: |
        Set `Review` body. 
      operationId: setReviewBodyById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` name
      -
        name: body
        in: formData
        required: true
        type: string
      responses:
        # Response code
        '200':
          description: A `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
    delete:
      tags:
        - Review
      description: |
        Deletes `Review` body
      operationId: deleteReviewBodyById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Review` name
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
  /Review/{id}/reviewer:
    get:
      tags:
          - Review
          - User
      description: |
        Gets reviewer of review
      operationId: getReviewReviewerById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      responses:
        # Response code
        '200':
          description: The `Review` reviewer user id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Review
        - User
      description: |
        Deletes `Review` reviewer
      operationId: deleteReviewReviewer
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
  /Review/{id}/reviewer/{user_id}:
    get:
      tags:
        - Review
        - User
      description: |
        Is user the reviewer?
      operationId: isUserReviewReviewer
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      -
        name: user_id
        in: path
        required: true
        type: string
        description: The `Review` id
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Review
        - User
      description: |
        Updates `Review` reviewer. 
      operationId: updateReviewReviewerById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` name
      -
        name: user_id
        in: path
        required: true
        type: string
      responses:
        # Response code
        '200':
          description: A `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Review
        - User
      description: |
        Set `Review` reviewer. 
      operationId: setReviewReviewerById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` name
      -
        name: user_id
        in: path
        required: true
        type: string
      responses:
        # Response code
        '200':
          description: A `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'        
    delete:
      tags:
        - Review
        - User
      description: |
        Deletes `Review` reviewer
      operationId: deleteReviewReviewerById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      -
        name: user_id
        in: path
        required: true
        type: string
        description: The `Review` reviewer id
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Review/{id}/rating:
    get:
      tags:
          - Review
      description: |
        Gets rating of review
      operationId: getReviewRatingById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      responses:
        # Response code
        '200':
          description: The `Review` rating
          schema:
            type: number
            format: int32
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Review
      description: |
        Deletes `Review` rating
      operationId: deleteReviewRating
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing               
  /Review/{id}/rating/{rating}:
    get:
      tags:
        - Review
      description: |
        Is rating equal to what we pass in
      operationId: isReviewRating
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      -
        name: rating
        in: path
        required: true
        type: string
        description: The `Review` rating
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Review
      description: |
        Updates `Review` rating
      operationId: updateReviewRating
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      -
        name: rating
        in: path
        required: true
        type: string
        description: The `Review` rating        
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Review
      description: |
        Sets `Review` rating
      operationId: setReviewRating
      produces:
        -	application/json
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      -
        name: rating
        in: path
        required: true
        type: string
        description: The `Review` rating        
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error' 
  /Review/{id}/url:
    get:
      tags:
          - Review
      description: |
        Gets url of review
      operationId: getReviewUrlById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      responses:
        # Response code
        '200':
          description: The `Review` url
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Review
      description: |
        Deletes `Review` url
      operationId: deleteReviewUrl
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Review
      description: |
        Updates `Review` url
      operationId: updateReviewUrl
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      - name: url
        in: formData
        required: true
        type: string
        description: The `Review` url
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'              
    post:
      tags:
        - Review
      description: |
        Sets `Review` url
      operationId: setReviewUrl
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      - name: url
        in: formData
        required: true
        type: string
        description: The `Review` url
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'                          
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing                          
  /Review/{id}/created:
    get:
      tags:
        - Review
      description: |
        Gets review created date
      operationId: getReviewCreatedDateById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      responses:
        # Response code
        '200':
          description: The `Review` create date
          schema:
            type: string
            format: date-time
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Review/{id}/updated:
    get:
      tags:
        - Review
      description: |
        Gets review updated date
      operationId: getReviewUpdatedDateById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Review` id
      responses:
        # Response code
        '200':
          description: The `Review` update date
          schema:
            type: string
            format: date-time
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            


  ######################################
  ################Skills################
  ######################################

  #/Skill
  #get put post delete
  #/Skill/{id}
  #get put delete
  #/Skill/{id}/body
  #get put
  #/Skill/{id}/modified
  #get
  #/Skill/{id}/url
  #get put

  #/Skills/created
  #get
  #/Skills/modified
  #get
  #/Skills/keys
  #get      #keyword search


  /Skills:
    get:
      tags:
        - Skill
      description: |
        Gets `Skill` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: getSkills
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: size
          in: formData
          description: Max size of array to return
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: Location in pagination
          required: true
          type: number
          format: int32
        -
          name: skill_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific `Skill`
        -
          name: created_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `Skill` creation
        -
          name: updated_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `Skill` update
        -
          name: description
          in: formData
          required: false
          type: string
          description: description of `Skill`
      responses:
        # Response code
        '200':
          description: An array of `Skill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Skills/created_date:
    get:
      tags:
        - Skill
      description: |
        Retrieve `Skill` objects created on or later than given date
      operationId: getSkillsByCreatedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: created_date
          in: formData
          description: date of creation
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Array of `Skill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Skills/created_date/{created_date}:
    get:
      tags:
        - Skill
      description: |
        Retrieve `Skill` objects created on or later than given date
      operationId: getSkillsByCreatedDate
      produces:
        - application/json
      parameters:
        -
          name: created_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: Array of `Skill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Skills/modified_date:
    get:
      tags:
        - Skill
      description: |
        Retrieve `Skill` objects modified on or later than given date
      operationId: getSkillsByModifiedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: modified_date
          in: formData
          description: date of modification
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Array of `Skill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Skills/modified_date/{modified_date}:
    get:
      tags:
        - Skill
      description: |
        Retrieve `Review` objects created on or later than given date
      operationId: getSkillsByModifiedDate
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: Array of `Skill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      
  #probably should avoid using this route if possible, but depends on descipriton format
  /Skills/description:
    get:
      tags:
        - Skill
      description: |
        Retrieve `Skill` objects with specified description
      operationId: getSkillsByDescription
      produces:
        - application/json
      parameters:
        -
          name: description
          in: formData
          description: text of description
          required: true
          type: string
      responses:
        '200':
          description: Array of `Skill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Skills/description/{description}:
    get:
      tags:
        - Skill
      description: |
        Retrieve if `Skill` object has specified description
      operationId: getIsDescriptionOnSkills
      produces:
        - application/json
      parameters:
        -
          name: description
          in: path
          description: text of description
          required: true
          type: string
      responses:
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      
  
      
  /Skill:
    put:
      tags:
        - Skill
      description: |
        Creates `Skill` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: createSkills
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: description
          in: formData
          required: false
          type: string
          description: description of `Skill`
      responses:
        # Response code
        '200':
          description: A `Skill` object
          schema:
            $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      
  /Skill/{id}:
    get:
      tags:
          - Skill
      description: |
        Retrieves `Skill` objects by **id**.
      operationId: getSkillById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` id
      responses:
        # Response code
        '200':
          description: The `Skill`
          schema:
            $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Skill
      description: |
        Updates `Skill` objects. **id** is required,
        all others optional.
      operationId: updateSkillById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: description
        in: formData
        required: false
        type: string
        description: description of `Skill` 
      responses:
        # Response code
        '200':
          description: A `Review` object
          schema:
            $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Skill
      description: |
        Deletes `Skill` objects by **id**.
      operationId: deleteSkillwById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Skill` id
      responses:
        # Response code
        '200':
          description: The `Review` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
  /Skill/{id}/description:
    get:
      tags:
        - Skill
      description: |
        Gets description of `Skill`
      operationId: getSkillBodyById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` id
      responses:
        # Response code
        '200':
          description: The `Skill` body
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Skill
      description: |
        Updates `Skill` description. 
      operationId: updateSkillDescriptionByIdForm
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` name
      -
        name: description
        in: formData
        required: true
        type: string
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Skill
      description: |
        Set `Skill` body. 
      operationId: setSkillDescriptionByIdForn
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` name
      -
        name: description
        in: formData
        required: true
        type: string
        description: The `Skill` description
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
    delete:
      tags:
        - Skill
      description: |
        Deletes `Skill` body
      operationId: deleteSkillDescriptionByIdForn
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `Skill` name
      responses:
        # Response code
        '200':
          description: The `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
  /Skill/{id}/description/{description}:
    get:
      tags:
        - Skill
      description: |
        Gets if description of `Skill` is on `Skill`
      operationId: getIsSkillBodyById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` id
      -
        name: description
        in: path
        required: true
        type: string
        description: The `Skill` description
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Skill
      description: |
        Updates `Skill` description. 
      operationId: updateSkillDescriptionById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` name
      -
        name: description
        in: path
        required: true
        type: string
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Skill
      description: |
        Set `Skill` body. 
      operationId: setSkillDescriptionById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` id
      -
        name: description
        in: path
        required: true
        type: string
        description: The `Skill` description
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /Skill/{id}/created:
    get:
      tags:
        - Skill
      description: |
        Gets `Skill` created date
      operationId: getSkillCreatedDateById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` id
      responses:
        # Response code
        '200':
          description: The `Skill` create date
          schema:
            type: string
            format: date-time
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Skill/{id}/updated:
    get:
      tags:
        - Skill
      description: |
        Gets `Skill` updated date
      operationId: getSkillUpdatedDateById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` id
      responses:
        # Response code
        '200':
          description: The `Skill` update date
          schema:
            type: string
            format: date-time
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
      
  ######################################
  ##############UserSkills##############
  ######################################

  #/UserSkill
  #get put post delete
  #/UserSkill/{id}
  #get put delete
  #/UserSkill/{id}/user
  #get put
  #/UserSkill/{id}/skill
  #get
  #/UserSkill/{id}/endorsements
  #get put

  #/UserSkills/created
  #get
  #/UserSkills/modified
  #get
  #/UserSkills/user
  #get      #keyword search
  #/UserSkills/skill
  #get      #keyword search
  #/UserSkills/endorsements
  #get      #keyword search


  /UserSkills:
    get:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Gets `UserSkill` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: getUserSkills
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: size
          in: formData
          description: Max size of array to return
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: Location in pagination
          required: true
          type: number
          format: int32
        -
          name: userskill_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific `UserSkill`
        -
          name: user_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific `User` that owns a skill
        -
          name: skill_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific `Skill` that a `UserSkill` represents
        -
          name: created_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `Skill` creation
        -
          name: updated_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `Skill` update
        -
          name: endorsement_ids
          in: formData
          required: false
          type: array
          items:
            type: string
          description: id of `User` endorser
      responses:
        # Response code
        '200':
          description: An array of `UserSkill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /UserSkills/created_date:
    get:
      tags:
        - UserSkill
        - Skill
        - User
      description: |
        Retrieve `UserSkill` objects created on or later than given date
      operationId: getUserSkillsByCreatedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: created_date
          in: formData
          description: date of creation
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Array of `UserSkill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /UserSkills/created_date/{created_date}:
    get:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Retrieve `UserSkill` objects created on or later than given date
      operationId: getUserSkillsByCreatedDate
      produces:
        - application/json
      parameters:
        -
          name: created_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: Array of `UserSkill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /UserSkills/modified_date:
    get:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Retrieve `UserSkill` objects modified on or later than given date
      operationId: getUserSkillsByModifiedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: modified_date
          in: formData
          description: date of modification
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Array of `UserSkill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /UserSkills/modified_date/{modified_date}:
    get:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Retrieve `UserSkill` objects created on or later than given date
      operationId: getUserSkillsByModifiedDate
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: Array of `UserSkill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      
  #probably should avoid using this route if possible, but depends on descipriton format
  /UserSkills/user/{user_id}:
    get:
      tags:
        - UserSkill
        - Skill
        - User
      description: |
        Retrieve `UserSkill` objects with specified description
      operationId: getUserSkillByUser
      produces:
        - application/json
      parameters:
        -
          name: user_id
          in: path
          description: Id of `User` to get `UserSkill` objects for
          required: true
          type: string
      responses:
        '200':
          description: Array of `UserSkill` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /UserSkills/description/skill/{skill_id}:
    get:
      tags:
        - Skill
        - UserSkill
      description: |
        Retrieve `UserSkill` objects with a specific `Skill` id
      operationId: getUserSkillsbySkillId
      produces:
        - application/json
      parameters:
        -
          name: skill_id
          in: path
          description: id of `Skill`
          required: true
          type: string
      responses:
        '200':
          description: Array of `UserSkill` objects
          schema:
            $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /UserSkills/description/skill:
    get:
      tags:
        - Skill
        - UserSkill
      description: |
        Retrieve `UserSkill` objects with a specific set of `Skill` ids
      operationId: getUserSkillsbySkillIds
      produces:
        - application/json
      parameters:
        -
          name: skill_ids
          in: formData
          description: id of `Skill` objects
          required: true
          type: string
      responses:
        '200':
          description: Array of `UserSkill` objects
          schema:
            $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /UserSkills/description/endorsements/{user_id}:
    get:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Retrieve `UserSkill` objects endorsed by a specific `User`
      operationId: getUserSkillsbyEndorsementId
      produces:
        - application/json
      parameters:
        -
          name: user_id
          in: path
          description: id of `User`
          required: true
          type: string
      responses:
        '200':
          description: Array of `UserSkill` objects
          schema:
            $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /UserSkills/description/endorsements:
    get:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Retrieve `UserSkill` objects endorsed by a specific set of `User` obejects
      operationId: getUserSkillsbyEndorsementIds
      produces:
        - application/json
      parameters:
        -
          name: user_id
          in: formData
          description: ids of `User` objects
          required: true
          type: array
          items:
            type: string
      responses:
        '200':
          description: Array of `UserSkill` objects
          schema:
            $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'              
  
  /UserSkill:
    post:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Creates `UserSkill` objects. **user_id** and **skill_id** are required, **endorsements** optional.
      operationId: createUserSkill
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: user_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific `User` that has a `UserSkill` represents      
        -
          name: skill_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific `Skill` that a `UserSkill` represents
        -
          name: endorsement_ids
          in: formData
          required: false
          type: array
          items:
            type: string
          description: id of `User` endorser
      responses:
        # Response code
        '200':
          description: A `UserSkill` object
          schema:
            $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      
  /UserSkill/{id}:
    get:
      tags:
          - Skill
          - UserSkill
          - User
      description: |
        Retrieves `UserSkill` object by **id**.
      operationId: getUserSkillById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` id
      responses:
        # Response code
        '200':
          description: The `UserSkill`
          schema:
            $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - UserSkill
        - Skill
        - User
      description: |
        Updates `UserSkill` objects. **id** is required,
        all others optional.
      operationId: updateUserSkillById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Post` name
      -
        name: user_id
        in: formData
        required: false
        type: string
        description: id of `User` that has skill
      -
        name: skill_id
        in: formData
        required: false
        type: string
        description: id of `Skill` that this `UserSkill` represents
      -
        name: endorsement_ids
        in: formData
        required: false
        type: array
        items:
          type: string
        description: The `User` objects who gave endorsement to `Skill`
      responses:
        # Response code
        '200':
          description: A `Review` object
          schema:
            $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Deletes `UserSkill` objects by **id**.
      operationId: deleteUserSkillwById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` id
      responses:
        # Response code
        '200':
          description: The `UserSkill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
  /UserSkill/{id}/skill:
    get:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Gets the `Skill`
      operationId: getUSerSkillSkillById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` id
      responses:
        # Response code
        '200':
          description: The `Skill`
          schema:
            $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Deletes `Skill` body
      operationId: deleteUserSkillSkilById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` id
      responses:
        # Response code
        '200':
          description: The `UserSkill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /UserSkill/{id}/skill/{skill_id}:            
    put:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Updates `Skill` contained in `UserSkill` . 
      operationId: updateUserSkillSkill
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` name
      -
        name: skill_id
        in: path
        required: true
        type: string
        description: The `Skill` id
      responses:
        # Response code
        '200':
          description: A `UserSkill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Set `UserSkill` body. 
      operationId: setUserSkillSkillDescriptionById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` name
      -
        name: skill_id
        in: path
        required: true
        type: string
        description: The `Skill` id
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'     
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
  /UserSkill/{id}/user:
    get:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Gets the `user`
      operationId: getUserSkillUserById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `Skill` id
      responses:
        # Response code
        '200':
          description: The `Skill`
          schema:
            $ref: '#/definitions/Skill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Skill
      description: |
        Deletes `Skill` body
      operationId: deleteUserSkillUserById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` id
      responses:
        # Response code
        '200':
          description: The `UserSkill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /UserSkill/{id}/user/{user_id}:            
    put:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Updates `User` contained in `UserSkill` . 
      operationId: updateUserSkillUserById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` name
      -
        name: user_id
        in: path
        required: true
        type: string
        description: The `User` id
      responses:
        # Response code
        '200':
          description: A `UserSkill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Set `User` on `UserSkill` . 
      operationId: setUserSkillUserById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` name
      -
        name: user_id
        in: path
        required: true
        type: string
        description: The `Skill` id
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'     
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing         
  /UserSkill/{id}/endorsement:            
    get:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Gets `User` ndorsements in `UserSkill` . 
      operationId: getUserSkillEndorsementById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` id
      responses:
        # Response code
        '200':
          description: The `UserSkill` 
          schema:
            type: array
            items:
              $ref: '#/definitions/UserSkill'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Set `User` on `UserSkill` . 
      operationId: setUserSkillEndorsementsById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` name
      -
        name: user_id
        in: formData
        required: true
        type: array
        items:
          type: string
        description: The `User` id
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'     
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
    put:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Add `User` objects on `UserSkill` . 
      operationId: addUserSkillEndorsementsById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` name
      -
        name: user_id
        in: formData
        required: true
        type: array
        items:
          type: string
        description: The `User` ids
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'     
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing         
    delete:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Remove all `User` endorsement on `UserSkill` . 
      operationId: removeUserSkillEndorsementsById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` name
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'     
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing         
  /UserSkill/{id}/endorsement/{user_id}:            
    put:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Adds `User` to endorsements in `UserSkill` . 
      operationId: addUserSkillEndorsementById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` id
      -
        name: user_id
        in: path
        required: true
        type: string
        description: The `User` id
      responses:
        # Response code
        '200':
          description: A `UserSkill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Set `User` on `UserSkill` . 
      operationId: setUserSkillEndorsementById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` name
      -
        name: user_id
        in: path
        required: true
        type: string
        description: The `User` id
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'     
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
    delete:
      tags:
        - Skill
        - UserSkill
        - User
      description: |
        Remove `User` endorsement on `UserSkill` . 
      operationId: removeUserSkillEndorsementById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` name
      -
        name: user_id
        in: path
        required: true
        type: string
        description: The `User` id
      responses:
        # Response code
        '200':
          description: A `Skill` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'     
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing             
  /UserSkill/{id}/created:
    get:
      tags:
        - Skill
        - UserSkill
      description: |
        Gets `UserSkill` created date
      operationId: getUserSkillCreatedDateById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` id
      responses:
        # Response code
        '200':
          description: The `UserSkill` create date
          schema:
            type: string
            format: date-time
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /UserSkill/{id}/updated:
    get:
      tags:
        - Skill
        - UserSkill
      description: |
        Gets `UserSkill` updated date
      operationId: getUserSkillUpdatedDateById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` id
      responses:
        # Response code
        '200':
          description: The `UserSkill` update date
          schema:
            type: string
            format: date-time
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            


######################################
  ##############University##############
  ######################################

  #/University
  #get put post delete
  #/University/{id}
  #get put delete
  #/University/{id}/name
  #get put
  #/University/{id}/name/{name}
  #get put
  #/University/{id}/geolocation
  #get
  #/University/{id}/geolocation/{lat}/{long}
  #get
  #/University/{id}/city
  #get put
  #/University/{id}/city/{city}
  #get put
  #/University/{id}/state
  #get put
  #/University/{id}/state/{state}
  #get put
  #/University/{id}/projects
  #/University/{id}/projects/{project}
  
  #/Universities
  #/Universities/created
  #/Universities/created/{created_date}
  #get
  #/Universities/modified
  #/Universities/modified/{modified_date}
  #get
  #/Universities/name/{name}
  #get      #keyword search
  #/Universities/geolocation
  #/Universities/geolocation/{lat}/{long}
  #/Universities/geolocation/{lat}/{long}/{radius}
  #get      #keyword search
  #/Universities/city/{city}
  #/Universities/state/{state}
  #/Universities/projects/
  #/Universities/projects/{project_id}
  


  /Universities:
    get:
      tags:
        - University
      description: |
        Gets `University` objects.
        Required query param of **size** determines
        max number of results per page, and **page** determines
        which page in the pagination we are. Remaining params optional.
      operationId: getUniversities
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: size
          in: formData
          description: Max size of array to return
          required: true
          type: number
          format: int32
        -
          name: page
          in: formData
          description: Location in pagination
          required: true
          type: number
          format: int32
        -
          name: university_id
          in: formData
          required: false
          type: string
          description: Unique identifier representing a specific `University`
        -
          name: name
          in: formData
          required: false
          type: string
          description: Name of a `University`
        -
          name: city
          in: formData
          required: false
          type: string
          description: City of `University`
        -
          name: state
          in: formData
          required: false
          type: string
          description: City of `University`          
        -
          name: created_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `University` creation
        -
          name: updated_date
          in: formData
          required: false
          type: string
          format: date-time
          description: datetime stamp of `University` update
        -
          name: project_ids
          in: formData
          required: false
          type: array
          items:
            type: string
          description: id of `Project` objects at this university
      responses:
        # Response code
        '200':
          description: An array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Universities/created_date:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects created on or later than given date
      operationId: getUniversitiesByCreatedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: created_date
          in: formData
          description: date of creation
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Universities/created_date/{created_date}:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects created on or later than given date
      operationId: getUniversitiesByCreatedDate
      produces:
        - application/json
      parameters:
        -
          name: created_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Universities/modified_date:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects modified on or later than given date
      operationId: getUniversitiesByModifiedDateForm
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: modified_date
          in: formData
          description: date of modification
          required: true
          type: string
          format: date-time
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /Universities/modified_date/{modified_date}:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects created on or later than given date
      operationId: getUniversitiesByModifiedDate
      produces:
        - application/json
      parameters:
        -
          name: modified_date
          in: path
          description: date of creation
          required: true
          type: string
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      
  #probably should avoid using this route if possible, but depends on descipriton format
  /Universities/name/{name}:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects with specified name
      operationId: getUniversitiesByName
      produces:
        - application/json
      parameters:
        -
          name: name
          in: path
          description: Name of `University` to search for
          required: true
          type: string
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Universities/name:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects with specified name
      operationId: getUniversitiesByNameForm
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        -
          name: name
          in: formData
          description: Name of `University` to search for
          required: true
          type: string
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Universities/city/{city}:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects with specified city
      operationId: getUniversitiesByCity
      produces:
        - application/json
      parameters:
        -
          name: city
          in: path
          description: City of `University` to search for
          required: true
          type: string
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Universities/city:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects with specified city
      operationId: getUniversitiesByCityForm
      produces:
        - application/json
      consumes:
        - application/json        
      parameters:
        -
          name: city
          in: formData
          description: City of `University` to search for
          required: true
          type: string
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Universities/state/{state}:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects with specified state
      operationId: getUniversitiesByState
      produces:
        - application/json
      parameters:
        -
          name: state
          in: path
          description: State of `University` to search for
          required: true
          type: string
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Universities/state:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects with specified state
      operationId: getUniversitiesByStateForm
      produces:
        - application/json
      consumes:
        - application/json        
      parameters:
        -
          name: state
          in: formData
          description: State of `University` to search for
          required: true
          type: string
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Universities/geolocation:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects with specified geolocation; radius is optional, defaults to 25 miles
      operationId: getUniversitiesByGeolocationForm
      produces:
        - application/json
      consumes:
        - application/json        
      parameters:
        -
          name: lat
          in: formData
          description: State of `University` to search for
          required: true
          type: number
          format: float
        -
          name: long
          in: formData
          description: State of `University` to search for
          required: true
          type: number
          format: float
        -
          name: radius
          in: formData
          description: Radius from specified lat and long to search, defaults to 25 miles if not specified
          required: false
          type: number
          format: float
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Universities/geolocation/{lat}/{long}:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects with specified geolocation; radius is optional, defaults to 25 miles
      operationId: getUniversitiesByGeolocationFormAndPath
      produces:
        - application/json
      parameters:
        -
          name: lat
          in: path
          description: State of `University` to search for
          required: true
          type: number
          format: float
        -
          name: long
          in: path
          description: State of `University` to search for
          required: true
          type: number
          format: float
        -
          name: radius
          in: formData
          description: Radius from specified lat and long to search, defaults to 25 miles if not specified
          required: false
          type: number
          format: float
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Universities/geolocation/{lat}/{long}/{radius}:
    get:
      tags:
        - University
      description: |
        Retrieve `University` objects with specified geolocation and radius
      operationId: getUniversitiesByGeolocationPath
      produces:
        - application/json
      parameters:
        -
          name: lat
          in: path
          description: State of `University` to search for
          required: true
          type: number
          format: float
        -
          name: long
          in: path
          description: State of `University` to search for
          required: true
          type: number
          format: float
        -
          name: radius
          in: path
          description: Radius from specified lat and long to search, defaults to 25 miles if not specified
          required: true
          type: number
          format: float
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  





    ######################################
      ##############Definitions#############
      ######################################
  /Universities/projects/{project_id}:
    get:
      tags:
        - University
        - Project
      description: |
        Retrieve `University` objects with specified project id
      operationId: getUniversitiesByProject
      produces:
        - application/json
      parameters:
        -
          name: project_id
          in: path
          description: ID of `Project` to search for
          required: true
          type: string
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    
  /Universities/projects:
    get:
      tags:
        - University
        - Project
      description: |
        Retrieve `University` objects with specified projects
      operationId: getUniversitiesByProjectsForm
      produces:
        - application/json
      consumes:
        - application/json        
      parameters:
        -
          name: projects
          in: formData
          description: Array of `Project` id items to search for
          required: true
          type: array
          items:
            type: string
      responses:
        '200':
          description: Array of `University` objects
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'    

  /University:
    post:
      tags:
        - University
      description: |
        Creates `University` objects. **name**, **city**, and **state** are required, all others optional.
      operationId: createUniversity
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        -
          name: name
          in: formData
          required: true
          type: string
          description: Name of `University`
        -
          name: city
          in: formData
          required: true
          type: string
          description: City of `University`
        -
          name: state
          in: formData
          required: true
          type: string
          description: state of `University`
        -
          name: geolocation
          in: formData
          required: false
          type: string
          description: 2 item tuple representing lat/long of `University`; if not provided will be calculated based on city/state
        -
          name: project_ids
          in: formData
          required: false
          type: array
          items:
            type: string
          description: ids of `Project` items at `University`
        -
          name: profile_images
          in: formData
          required: false
          type: array
          items:
            type: string
          description: paths to profile images for `University`
      responses:
        # Response code
        '200':
          description: A `University` object
          schema:
            type: array
            items:
              $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'      
  /University/{id}:
    get:
      tags:
          - University
      description: |
        Retrieves `University` object by **id**.
      operationId: getUniversityById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `UserSkill` id
      responses:
        # Response code
        '200':
          description: The `University`
          schema:
            $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - University
      description: |
        Updates `University` objects. **id** is required,
        all others optional.
      operationId: updateUniversityById
      produces:
        -	application/json
      consumes:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: name
        in: formData
        required: true
        type: string
        description: Name of `University`
      -
        name: city
        in: formData
        required: true
        type: string
        description: City of `University`
      -
        name: state
        in: formData
        required: true
        type: string
        description: state of `University`
      -
        name: geolocation
        in: formData
        required: false
        type: string
        description: 2 item tuple representing lat/long of `University`; if not provided will be calculated based on city/state
      -
        name: project_ids
        in: formData
        required: false
        type: array
        items:
          type: string
        description: ids of `Project` items at `University`
      -
        name: profile_images
        in: formData
        required: false
        type: array
        items:
          type: string
        description: paths to profile images for `University`
      responses:
        # Response code
        '200':
          description: A `University` object
          schema:
            $ref: '#/definitions/University'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - University
      description: |
        Deletes `University` objects by **id**.
      operationId: deleteUniversityById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      #should only modify users using the user/{id} route to make sure we don't
      # accidentally nike the wrong thing   
  /University/{id}/name:
    get:
      tags:
        - University
      description: |
        Gets the `University` name
      operationId: getUniversityNameById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` name
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - University
      description: |
        Deletes `University` name
      operationId: deleteUniversityNameById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /University/{id}/name/{name}:
    get:
      tags:
        - University
      description: |
        Gets if the `University` name matches the parameter
      operationId: isUniversityNameById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: name
        in: path
        required: true
        type: string
        description: The `University` name        
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - University
      description: |
        Updates `University` name
      operationId: updateUniversityNameById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      - name: name
        in: path
        required: true
        type: string
        description: The `University` name
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - University
      description: |
        Sets `University` name
      operationId: setUniversityNameById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      - name: name
        in: path
        required: true
        type: string
        description: The `University` name
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /University/{id}/city:
    get:
      tags:
        - University
      description: |
        Gets the `University` city
      operationId: getUniversityCityById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` city
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - University
      description: |
        Deletes `University` city
      operationId: deleteUniversityCityById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /University/{id}/city/{city}:
    get:
      tags:
        - University
      description: |
        Gets if the `University` city matches the parameter
      operationId: isUniversityCityById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: city
        in: path
        required: true
        type: string
        description: The `University` city        
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - University
      description: |
        Updates `University` city
      operationId: updateUniversityCityById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      - name: city
        in: path
        required: true
        type: string
        description: The `University` city
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - University
      description: |
        Sets `University` city
      operationId: setUniversityCityById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      - name: city
        in: path
        required: true
        type: string
        description: The `University` city
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /University/{id}/state:
    get:
      tags:
        - University
      description: |
        Gets the `University` state
      operationId: getUniversityStateById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` state
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - University
      description: |
        Deletes `University` state
      operationId: deleteUniversityStateById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /University/{id}/state/{state}:
    get:
      tags:
        - University
      description: |
        Gets if the `University` state matches the parameter
      operationId: isUniversityStateById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: state
        in: path
        required: true
        type: string
        description: The `University` state        
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - University
      description: |
        Updates `University` state
      operationId: updateUniversityStateById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      - name: state
        in: path
        required: true
        type: string
        description: The `University` state
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - University
      description: |
        Sets `University` state
      operationId: setUniversityStateById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      - name: state
        in: path
        required: true
        type: string
        description: The `University` state
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /University/{id}/geolocation:
    get:
      tags:
        - University
      description: |
        Gets the `University` geolocation
      operationId: getUniversityGeolocationById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` geolocation as a tuple
          schema:
            type: array
            items:
              type: number
              format: float
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - University
      description: |
        Updates `University` geolocation
      operationId: updateUniversityGeolocationByIdForm
      produces:
        -	application/json
      consumes:
        -	application/json        
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: lat
        in: formData
        required: true
        type: number
        format: float
        description: The `University` latitude
      -
        name: long
        in: formData
        required: true
        type: number
        format: float
        description: The `University` longitude      
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - University
      description: |
        Sets `University` geolocation
      operationId: setUniversityGeolocationByIdForm
      produces:
        -	application/json
      consumes:
        -	application/json        
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: lat
        in: formData
        required: true
        type: number
        format: float
        description: The `University` latitude
      -
        name: long
        in: formData
        required: true
        type: number
        format: float
        description: The `University` longitude    
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'                      
    delete:
      tags:
        - University
      description: |
        Deletes `University` geolocation
      operationId: deleteUniversityGeolocationById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /University/{id}/geolocation/{lat}/{long}:
    get:
      tags:
        - University
      description: |
        Gets if the `University` geolocation the parameters
      operationId: isUniversityGeolocationById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: lat
        in: path
        required: true
        type: number
        format: float
        description: The `University` latitude
      -
        name: long
        in: path
        required: true
        type: number
        format: float
        description: The `University` longitude        
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - University
      description: |
        Updates `University` geolocation
      operationId: updateUniversityGeolocationById
      produces:
        -	application/json
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: lat
        in: path
        required: true
        type: number
        format: float
        description: The `University` latitude
      -
        name: long
        in: path
        required: true
        type: number
        format: float
        description: The `University` longitude      
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - University
      description: |
        Sets `University` state
      operationId: setUniversityGeolocationById
      produces:
        -	application/json
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: lat
        in: path
        required: true
        type: number
        format: float
        description: The `University` latitude
      -
        name: long
        in: path
        required: true
        type: number
        format: float
        description: The `University` longitude    
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /University/{id}/projects:
    get:
      tags:
        - University
        - Project
      description: |
        Gets the `University` projects
      operationId: getUniversityProjectsById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` state
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - University
        - Project
      description: |
        Deletes `University` projects
      operationId: deleteUniversityProjectsById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - University
        - Project
      description: |
        Sets `University` projects
      operationId: setUniversityProjectsById
      produces:
        -	application/json
      consumes:
        -	application/json        
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: project_ids
        in: formData
        required: true
        description: The `Project` ids        
        type: array
        items:
          type: string        
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - University
        - Project
      description: |
        Adds `University` projects
      operationId: addUniversityProjectsById
      produces:
        -	application/json
      consumes:
        -	application/json        
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: project_ids
        in: formData
        required: true
        description: The `Project` ids        
        type: array
        items:
          type: string        
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /University/{id}/projects/{project_id}:
    get:
      tags:
        - University
        - Project
      description: |
        Gets if the `University` has the `Project`
      operationId: isUniversityProjectsById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: project_id
        in: path
        required: true
        type: string
        description: The `Project` id        
      responses:
        # Response code
        '200':
          description: The boolean
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - University
        - Project
      description: |
        Deletes `Project` from `University` 
      operationId: deleteUniversityProjectById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: project_id
        in: path
        required: true
        type: string
        description: The `Project` id                
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - University
        - Project
      description: |
        Sets `University` projects to this single project (probably will never use this)
      operationId: setUniversityProjectById
      produces:
        -	application/json
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: project_id
        in: path
        required: true
        type: string
        description: The `Project` id        
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - University
        - Project
      description: |
        Adds `University` project
      operationId: addUniversityProjectById
      produces:
        -	application/json
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: project_id
        in: path
        required: true
        type: string
        description: The `Project` ids      
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'            
  /University/{id}/images:
    get:
      tags:
        - University
      description: |
        Gets the `University` images
      operationId: getUniversityimagesById
      produces:
        -	application/json
      parameters:
      -
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` image paths
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - University
      description: |
        Deletes `University` images
      operationId: deleteUniversityImagesById
      produces:
        -	application/json
      parameters:
      - name: id
        in: path
        required: true
        type: string
        description: The `University` id
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - University
      description: |
        Sets `University` profile image paths
      operationId: setUniversityImagesById
      produces:
        -	application/json
      consumes:
        -	application/json        
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: profile_image_paths
        in: formData
        required: true
        description: The `University` profile image paths
        type: array
        items:
          type: string        
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - University
        - Project
      description: |
        Adds `University` projects
      operationId: addUniversityProfileImagesById
      produces:
        -	application/json
      consumes:
        -	application/json        
      parameters:
      - 
        name: id
        in: path
        required: true
        type: string
        description: The `University` id
      -
        name: profile_image_paths
        in: formData
        required: true
        description:  The `University` profile image paths
        type: array
        items:
          type: string        
      responses:
        # Response code
        '200':
          description: The `University` id
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
     

definitions:
  User:
    type: object
    properties:
      user_id:
        type: string
        description: Unique identifier representing a specific user
      first_name:
        type: string
        description: User's first name.
      last_name:
        type: string
        description: User's last name
      is_creator:
        type: boolean
        description: Is user a project creator? #(not mutually exclusive with is_collaborator)
      is_collaborator:
        type: boolean
        description: Is user a project collaborator? #(not mutually exclusive with is_creator)
      profile_images:
        type: array
        items:
          type: string
        description: Array of file system paths to profile images
      created_date:
        type: string
        format: date-time
        description: datetime stamp of user creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of user update
      geolocation:
        type: array
        items:
          type: number
          format: double
        description: Tuple representing latitude/longitude of user
      city:
        type: string
        description: City of user location
      state:
        type: string
        description: State of user location
      recent_collaborators_id:
        type: array
        items:
          type: string
        description: array of user_ids of recent collaborators
      university_ids:
        type: array
        items:
          type: string
        description: array of universities the user is associated with
      project_ids:
        type: array
        items:
          type: string
        description: array of user projects
      keywords:
        type: array
        items:
          type: string
        description: array of keywords associated with the user
      review_ids:
        type: array
        items:
          type: string
        description: array of review ids
      user_skill_ids:
        type: array
        items:
          type: string
        description: array of userskill ids
      is_user_private:
        type: boolean
        description:  is user profile public or private?
  Users:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/User'
  Project:
    type: object
    properties:
      project_id:
        type: string
        description: Unique identifier representing a specific project
      created_date:
        type: string
        format: date-time
        description: datetime stamp of project creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of project update
      project_name:
        type: string
        description: Project's name
      project_main_grant_type:
        type: string
        description: Project's grant type
      project_description:
        type: string
        description: Description of project
      project_creator_id:
        type: array
        items:
          type: string
        description: array of project creator ids
      project_collaborators_id:
        type: array
        items:
          type: string
        description: array of project collaborator ids
      project_keywords:
        type: array
        items:
          type: string
        description: array of project keywords
      project_urls:
        type: array
        items:
          type: string
        description: array of project URLs
      grant_id:
        type: string
        description: Grant ID
      university_id:
        type: string
        description: ID of university hosting research
      grant_facilitator:
        type: string
        description: Name of individual fascilitating grant funding
      project_file:
        type: array
        items:
          type: string
        description: files for grant
      reviews:
        type: array
        items:
          type: string
        description: reviews
      posts:
        type: array
        items:
          type: string
        description: posts related to project
      is_project_private:
        type: boolean
        description: is project private?
  Projects:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Project'
  Post:
    type: object
    properties:
      post_id:
        type: string
        description: id of post
      created_date:
        type: string
        format: date-time
        description: datetime stamp of post creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of post update
      post_title:
        type: string
        description: title of post
      post_text:
        type: string
        description: text of post
      post_keywords:
        type: array
        items:
          type: string
        description: keywords for post
      post_author:
        $ref: '#/definitions/User'
        description: author of post
      post_author_id:
        type: string
        description: id of author of post
      post_tags:
        type: array
        items:
          $ref: '#/definitions/User'
        description: tagged users
      post_tags_id:
        type: array
        items:
          type: string
        description: tagged user ids
      is_post_private:
        type: boolean
        description: is post private?
  Posts:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Post'
  Grant:
    type: object
    properties:
      grant_id:
        type: string
        description: id of grant
      created_date:
        type: string
        format: date-time
        description: datetime stamp of grant creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of grant update
      grant_url:
        type: array
        items:
          type: string
        description: URL of grants
      grant_keywords:
        type: array
        items:
          type: string
        description: grant keywords
      grant_description:
        type: string
        description: Grant description
      grant_amount:
        type: number
        format: double
        description: Amount of grant
  Grants:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Grant'
  Review:
    type: object
    properties:
      review_id:
        type: string
        description: id of review
      created_date:
        type: string
        format: date-time
        description: datetime stamp of review creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of review update
      review_body:
        type: string
        description: text body of review
      reviewer:
        $ref: '#/definitions/User'
        description: reviewer user
      reviewer_id:
        type: string
        description: reviewer user id
      rating:
        type: integer
        format: int32
        description: rating, must be 1-5
  Reviews:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Review'
 #so for skills
 #basically we want to associate those with the user
 #BUT
 #we want to be able to get a master list of skills too and order them popularity
 #so group them and sort by count maybe? kinda like stackoverflow seems to to with tags?
  Skill:
    type: object
    properties:
      review_id:
        type: string
        description: id of skill
      created_date:
        type: string
        format: date-time
        description: datetime stamp of skill creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of skill update
      description:
        type: string
        description: Description of `Skill`
  Skills:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/Skill'
  UserSkill:
    type: object
    properties:
      review_id:
        type: string
        description: id of `Endorsement`
      created_date:
        type: string
        format: date-time
        description: datetime stamp of `Endorsement` creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of `Endorsement` update
      user_id:
        type: string
        description: Id of `User` who added this skill
      endorsements:
        type: array
        items:
          type: string
        description: Array of ids of `User` who give `Endorsement` to user for skill
      skill_id:
        type: string
        description: id of `Skill` that user is claiming
  UserSkills:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/UserSkill'          
  University:
    type: object
    properties:
      uni_id:
        type: string
        description: id of `University`
      created_date:
        type: string
        format: date-time
        description: datetime stamp of `University` creation
      updated_date:
        type: string
        format: date-time
        description: datetime stamp of `University` update
      university_name:
        type: string
        description: text body of `University`
      profile_images:
        type: array
        items:
          type: string
        description: Array of file system paths to profile images
      geolocation:
        type: array
        items:
          type: number
          format: double
        description: Tuple representing latitude/longitude of user
      city:
        type: string
        description: City of `University` location
      state:
        type: string
        description: State of `University` location
      project_ids:
        type: array
        items:
          type: string
        description: ids of `Project`s based at this `University`
  Universities:
    type: object
    properties:
      offset:
        type: integer
        format: int32
        description: Position in pagination.
      limit:
        type: integer
        format: int32
        description: Number of items to retrieve (100 max).
      count:
        type: integer
        format: int32
        description: Total number of items available.
      history:
        type: array
        items:
          $ref: '#/definitions/University'
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
