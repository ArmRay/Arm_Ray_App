#!/usr/bin/env node

/**
 * Module dependencies.
 */
import app from '../api';
import http from 'http';
import config from '../lib/config';
import logger from '../lib/logger';
import passport from 'passport';
const localstrategy = require('passport-local').Strategy;
const facebookstrategy = require('passport-facebook').Strategy;
const twitterstrategy = require('passport-twitter').Strategy;
const Oauthstrategy = require('passport-oauth').Strategy;



const log = logger(config.logger);


/*passport.use(new facebookstrategy({},function(accessToken, refreshToken, profile, done) {
    // asynchronous verification, for effect...
    process.nextTick(function () {
      return done(null, profile);
    });
});*/
passport.use(new localstrategy({},function(accessToken, refreshToken, profile, done) {
    // asynchronous verification, for effect...
    process.nextTick(function () {
      return done(null, profile);
    });
}));

/*
passport.use(new twitterstrategy({},function(accessToken, refreshToken, profile, done) {
    // asynchronous verification, for effect...
    process.nextTick(function () {
      return done(null, profile);
    });
}));


passport.use(new Oauthstrategy({},function(accessToken, refreshToken, profile, done) {
    // asynchronous verification, for effect...
    process.nextTick(function () {
      return done(null, profile);
    });
}));
*/

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(config.api.port || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    log.fatal(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
  case 'EADDRINUSE':
    log.fatal(`${bind} is already in use`);
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  log.debug(`Listening on ${bind}`);
}
